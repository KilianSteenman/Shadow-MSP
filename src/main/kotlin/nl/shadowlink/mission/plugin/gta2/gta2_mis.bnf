{
    parserClass="nl.shadowlink.mission.plugin.gta2.parser.Gta2MissionParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Mission"
    psiImplClassSuffix="Impl"
    psiPackage="nl.shadowlink.mission.plugin.gta2.psi"
    psiImplPackage="nl.shadowlink.mission.plugin.gta2.psi.impl"

    elementTypeHolderClass="nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes"
    elementTypeClass="nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionElementType"
    tokenTypeClass="nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTokenType"

  tokens=[
    EQ='='
    LP='('
    RP=')'
    COMMA=','

    space='regexp:\s+'
    number='regexp:\d+(\.\d*)?'
    id='regexp:[a-z0-9_]+'
    comment='regexp://.*'
    method='regexp:[a-z_]+:'

    // Definitions
    PLAYER_PED_DEF='PLAYER_PED'
    CHAR_DATA_DEF='CHAR_DATA'
    COUNTER_DEF = 'COUNTER'
    FORWARD_DEF = 'FORWARD'
    TIMER_DATA_DEF = 'TIMER_DATA'
    THREAD_TRIGGER_DEF = 'THREAD_TRIGGER'

    // Reserved words
    LEVEL_START='LEVELSTART'
    LEVEL_END='LEVELEND'
    WHILE_EXEC = 'WHILE_EXEC'
    WHILE = 'WHILE'
    END_WHILE = 'ENDWHILE'
    IF = 'IF'
    END_IF = 'ENDIF'
    END = 'END'
    RETURN = 'RETURN'
    SET = 'SET'

    ENUM = 'regexp:[A-Z0-9_]+'

    op_1='+'
    op_2='-'
    op_3='*'
    op_4='/'
    op_plus_plus='++'
  ]
}

missionFile ::= (dataBlock? levelBlock?)

dataBlock ::= definition*
levelBlock ::= (LEVEL_START expression* LEVEL_END)

definition ::= (type id assignment?) | comment | (type method) | method_def

private assignment ::= (EQ params*)
type ::= PLAYER_PED_DEF | CHAR_DATA_DEF | COUNTER_DEF | FORWARD_DEF | TIMER_DATA_DEF | THREAD_TRIGGER_DEF

vector3 ::= LP number COMMA number COMMA number RP

expression ::= while | if | method_def | statement | comment | set
statement ::= ((id EQ)? ENUM params* END?) | (id EQ param) | (op_plus_plus id)
private params ::= vector3 | number | ENUM | id | (LP (param ','?)* RP)
private param ::= number | ENUM | id | method

private method_def ::= method expression* RETURN
private if ::= IF LP statement RP expression* END_IF
private while ::= WHILE_EXEC LP statement RP expression* END_WHILE
private set ::= (SET id assignment)