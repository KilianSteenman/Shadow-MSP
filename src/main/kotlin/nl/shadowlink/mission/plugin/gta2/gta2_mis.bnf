{
    parserClass="nl.shadowlink.mission.plugin.gta2.parser.Gta2MissionParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Mission"
    psiImplClassSuffix="Impl"
    psiPackage="nl.shadowlink.mission.plugin.gta2.psi"
    psiImplPackage="nl.shadowlink.mission.plugin.gta2.psi.impl"

    elementTypeHolderClass="nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes"
    elementTypeClass="nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionElementType"
    tokenTypeClass="nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTokenType"

  tokens=[
    SPACE='regexp:\s+'
    NUMBER='regexp:\d+(\.\d*)?'
    IDENTIFIER='regexp:[a-z0-9_]+'
    COMMENT='regexp://.*'
    SUBROUTINE='regexp:([a-z_]+):'

    // Reserved words
    LEVEL_START='LEVELSTART'
    LEVEL_END='LEVELEND'
    WHILE_EXEC = 'WHILE_EXEC'
    WHILE = 'WHILE'
    END_WHILE = 'ENDWHILE'
    IF = 'IF'
    END_IF = 'ENDIF'
    END = 'END'
    RETURN = 'RETURN'
    SET = 'SET'

    METHOD = 'regexp:[A-Z_]+'

    OP_PLUS_PLUS='++'
  ]
}

MissionFile ::= (DefinitionBlock? LevelBlock?)

DefinitionBlock ::= Definition*

Definition ::= VariableDefinition | SubroutineDefinition | COMMENT | (Type SUBROUTINE)

VariableDefinition ::= (Type IDENTIFIER Assignment?)
SubroutineDefinition ::= SUBROUTINE Expression* RETURN

Type ::= PLAYER_PED | CHAR_DATA | COUNTER | FORWARD | TIMER_DATA | THREAD_TRIGGER

LevelBlock ::= (LEVEL_START LevelBody? LEVEL_END)
LevelBody ::= Expression*

private Assignment ::= '=' Param

Expression ::= COMMENT | VariableAssignment | MethodCall | WhileExpression | IfExpression | SubroutineDefinition | SetExpression
VariableAssignment ::= IDENTIFIER '=' (Param | MethodCall)
MethodCall ::= METHOD Params? END?
Params ::= Param+ | ('(' (Param ','?)+ ')')
Param ::= NUMBER | Enum | IDENTIFIER | SUBROUTINE | Vector3

Enum ::= MACHINE_GUN | CRIMINAL_TYPE2 | AREA_PLAYER_ONLY | REACT_AS_NORMAL | KILL_CHAR_ON_FOOT
Vector3 ::= '(' number ',' number ',' number ')'

ConditionalStatement ::= IDENTIFIER '=' Param | MethodCall

IfExpression ::= IF '(' ConditionalStatement ')' Expression* END_IF
WhileExpression ::= WHILE_EXEC '(' ConditionalStatement ')' Expression* END_WHILE
SetExpression ::= (SET IDENTIFIER Assignment)