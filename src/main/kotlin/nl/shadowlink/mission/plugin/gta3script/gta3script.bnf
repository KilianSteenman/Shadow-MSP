{
    parserClass="nl.shadowlink.mission.plugin.gta3script.parser.Gta3ScriptParser"
    parserUtilClass="nl.shadowlink.mission.plugin.gta3script.parser.Gta3ScriptParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Gta3Script"
    psiImplClassSuffix="Impl"
    psiPackage="nl.shadowlink.mission.plugin.gta3script.psi"
    psiImplPackage="nl.shadowlink.mission.plugin.gta3script.psi.impl"

    elementTypeHolderClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptTypes"
    elementTypeClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptElementType"
    tokenTypeClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptTokenType"

    psiImplUtilClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptUtils"

  tokens=[
    SPACE='regexp:\s+'
    NUMBER='regexp:-?\d+(\.\d*)?'
    COMMENT='regexp://.*'
    COMMENTBLOCK='regexp:\/\*(\*(?!\/)|[^*])*\*\/'

    // Reserved words
    LEVEL_START='LEVELSTART'
    LEVEL_END='LEVELEND'
    MISSION_START='MISSION_START'
    MISSION_END='MISSION_END'
    WHILE_EXEC = 'WHILE_EXEC'
    END_WHILE_EXEC = 'END_WHILE_EXEC'
    WHILE = 'WHILE'
    END_WHILE = 'ENDWHILE'
    EXEC = 'EXEC'
    END_EXEC = 'ENDEXEC'
    IF = 'IF'
    END_IF = 'ENDIF'
    ELSE = 'ELSE'
    AND = 'AND'
    END = 'END'
    RETURN = 'RETURN'
    SET = 'SET'
    NOT = 'NOT'
    ON = 'ON'
    OFF = 'OFF'
    TRUE = 'TRUE'
    FALSE = 'FALSE'
    GOSUB = 'GOSUB'

    IDENTIFIER='regexp:\$?[a-zA-Z0-9_.]+'

    OP_PLUS_PLUS='++'
    OP_PLUS='+'
    OP_MINUS_MINUS='--'
    OP_MINUS='-'
    OP_TIMES='*'
    OP_DIVISION='/'
    OP_LESS_THAN='<'
    OP_GREATER_THAN='>'
    EQUALS='='
  ]
}

ScriptFile ::= Expression* MissionBlock? Expression*

MissionBlock ::= MISSION_START Expression* MISSION_END

Expression ::= SubroutineDefinition | VariableDefinition | VariableAssignment | MethodCall | LocalScope | IfExpression | WhileExpression | MathOperation | SubroutineCall

VariableDefinition ::= Type VariableIdentifierList
VariableIdentifierList ::= VariableIdentifier VariableIdentifierList | VariableIdentifier ',' VariableIdentifierList | VariableIdentifier
VariableIdentifier ::= IDENTIFIER

SubroutineDefinition ::= SubroutineLabel ':' Expression* RETURN {
    mixin="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElementImpl"
    implements="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElement"
    methods=[getNameIdentifier setName getName]
}
SubroutineLabel ::= IDENTIFIER

Type ::= VAR_INT | VAR_FLOAT

LocalScope ::= '{' Expression* '}'

VariableAssignment ::= VariableReference EQUALS Param
MathOperation ::= VariableReference MathOperator EQUALS Param

MethodCall ::= IDENTIFIER MethodParamList | IDENTIFIER
MethodParamList ::= MethodParam MethodParamList | MethodParam
MethodParam ::= Param

SubroutineCall ::= GOSUB SubroutineReference
SubroutineReference ::= IDENTIFIER {
    methods=[getReference]
}
VariableReference ::= IDENTIFIER {
    methods=[getReference]
}

Param ::= NUMBER | VariableReference | SUBROUTINE | Boolean | GxtReference

GxtReference ::= '(' IDENTIFIER ')'
Boolean ::= TRUE | FALSE | ON | OFF
MathOperator ::= OP_PLUS | OP_MINUS | OP_TIMES | OP_DIVISION
ComparisonOperator ::= '<' | '>' | '>=' | '<=' | '='

ConditionalStatement ::= NOT? (MethodCall | Comparison)
Comparison ::= Param ComparisonOperator Param

IfExpression ::= IF ConditionalStatement Expression* (ELSE Expression*)? END_IF
WhileExpression ::= WHILE ConditionalStatement Expression* END_WHILE
