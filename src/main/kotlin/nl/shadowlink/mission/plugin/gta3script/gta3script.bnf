{
    parserClass="nl.shadowlink.mission.plugin.gta3script.parser.Gta3ScriptParser"
  parserUtilClass="nl.shadowlink.mission.plugin.gta3script.parser.Gta3ScriptParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Gta3Script"
    psiImplClassSuffix="Impl"
    psiPackage="nl.shadowlink.mission.plugin.gta3script.psi"
    psiImplPackage="nl.shadowlink.mission.plugin.gta3script.psi.impl"

    elementTypeHolderClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptTypes"
    elementTypeClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptElementType"
    tokenTypeClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptTokenType"

    psiImplUtilClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptUtils"

  tokens=[
    SPACE='regexp:\s+'
    NUMBER='regexp:-?\d+(\.\d*)?'
    COMMENT='regexp://.*'
    SUBROUTINE='regexp:([a-z--9_]+):'
    COMMENTBLOCK='regexp:\/\*(\*(?!\/)|[^*])*\*\/'

    // Reserved words
    LEVEL_START='LEVELSTART'
    LEVEL_END='LEVELEND'
    MISSION_START='MISSIONSTART'
    MISSION_END='MISSIONEND'
    WHILE_EXEC = 'WHILE_EXEC'
    END_WHILE_EXEC = 'END_WHILE_EXEC'
    WHILE = 'WHILE'
    END_WHILE = 'ENDWHILE'
    EXEC = 'EXEC'
    END_EXEC = 'ENDEXEC'
    IF = 'IF'
    END_IF = 'ENDIF'
    ELSE = 'ELSE'
    AND = 'AND'
    END = 'END'
    RETURN = 'RETURN'
    SET = 'SET'
    NOT = 'NOT'
    ON = 'ON'
    OFF = 'OFF'
    GOSUB = 'GOSUB'
    PREPROCESS_IFDEF = '#ifdef'
    PREPROCESS_ENDIF = '#endif'
    DEF_PC = 'PC'
    DEF_PSX = 'PSX'
    DO_NOWT = 'DO_NOWT'

    METHOD = 'regexp:[A-Z_]+'
    IDENTIFIER='regexp:[a-zA-Z0-9_]+'

    OP_PLUS_PLUS='++'
    OP_PLUS='+'
    OP_MINUS_MINUS='--'
    OP_MINUS='-'
    OP_TIMES='*'
    OP_DIVISION='/'
    OP_LESS_THAN='<'
    OP_GREATER_THAN='>'
    EQUALS='='
  ]
}

MissionFile ::= (DefinitionBlock? (LevelBlock | MissionBlock)?)

DefinitionBlock ::= Expression*

Definition ::= VariableDefinition | SubroutineDefinition | COMMENT | (Type SUBROUTINE) | PreprocessBlock

VariableDefinition ::= (Type IDENTIFIER Assignment?) {
    mixin="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElementImpl"
    implements="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElement"
    methods=[getNameIdentifier setName getName]
}
private Assignment ::= EQUALS ((Vector+ (Param+)?) | Param) END?

SubroutineDefinition ::= SUBROUTINE Expression* RETURN {
    mixin="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElementImpl"
    implements="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElement"
    methods=[getNameIdentifier setName getName]
}

Type ::= PLAYER_PED | CHAR_DATA | COUNTER | ONSCREEN_COUNTER | FORWARD | TIMER_DATA | THREAD_TRIGGER | CAR_DATA | BONUS | ARROW_DATA | MAP_ZONE | OBJ_DATA | SAVED_COUNTER | CONVEYOR | GENERATOR | DESTRUCTOR | CRANE_DATA | CRUSHER | SOUND | LIGHT

LevelBlock ::= (LEVEL_START LevelBody? LEVEL_END)
MissionBlock ::= (MISSION_START LevelBody? MISSION_END)
LevelBody ::= Expression*

Expression ::= COMMENT | VariableAssignment | MethodCall | WhileExecExpression | WhileExpression | IfExpression | SubroutineDefinition | SetExpression | MathAssignment | CommentBlock | GosubCall | PreprocessBlock | Definition | DO_NOWT | ExecExpression
VariableAssignment ::= VariableReference EQUALS MethodCall? Params END?
MethodCall ::= METHOD '(' Params ')' END?
GosubCall ::= GOSUB SubroutineReference
SubroutineReference ::= SUBROUTINE {
    methods=[getReference]
}
VariableReference ::= IDENTIFIER {
    methods=[getReference]
}
MathAssignment ::= OP_PLUS_PLUS VariableReference | VariableReference OP_PLUS_PLUS
CommentBlock ::= COMMENTBLOCK
Params ::= (Param ','?)* ','?
Param ::= NUMBER | Enum | VariableReference | SUBROUTINE | Vector3 | Boolean

Enum ::= MACHINE_GUN | CRIMINAL_TYPE2 | AREA_PLAYER_ONLY | REACT_AS_NORMAL | KILL_CHAR_ON_FOOT
Vector3 ::= '(' number ',' number ',' number ')'
Vector ::= '(' ( NUMBER ','?)+ ')'
Boolean ::= ON | OFF

ConditionalStatement ::= VariableReference (EQUALS | OP_GREATER_THAN | OP_LESS_THAN) Param | MethodCall | NOT? '(' ConditionalStatement ')' AndStatement*
AndStatement ::= AND '(' ConditionalStatement ')'

IfExpression ::= IF '(' ConditionalStatement ')' Expression* (ELSE Expression*)? END_IF
WhileExecExpression ::= WHILE_EXEC '(' ConditionalStatement ')' Expression* (END_WHILE_EXEC | END_WHILE)
WhileExpression ::= WHILE '(' ConditionalStatement ')' Expression* END_WHILE
ExecExpression ::= EXEC Expression* END_EXEC
SetExpression ::= SET VariableReference EQUALS (Param | MathOperation)

PreprocessBlock ::= (PREPROCESS_IFDEF PreprocessType Expression* PREPROCESS_ENDIF)
PreprocessType ::= DEF_PC | DEF_PSX

MathOperation ::= '(' (NUMBER | IDENTIFIER) MathOperator (NUMBER | IDENTIFIER) ')'
MathOperator ::= OP_PLUS | OP_MINUS | OP_TIMES | OP_DIVISION