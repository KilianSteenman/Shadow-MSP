{
    parserClass="nl.shadowlink.mission.plugin.gta3script.parser.Gta3ScriptParser"
    parserUtilClass="nl.shadowlink.mission.plugin.gta3script.parser.Gta3ScriptParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Gta3Script"
    psiImplClassSuffix="Impl"
    psiPackage="nl.shadowlink.mission.plugin.gta3script.psi"
    psiImplPackage="nl.shadowlink.mission.plugin.gta3script.psi.impl"

    elementTypeHolderClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptTypes"
    elementTypeClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptElementType"
    tokenTypeClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptTokenType"

    psiImplUtilClass="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptUtils"

  tokens=[
    NEW_LINE="regexp:\\n"
    WHITE_SPACE='regexp:\\s+'
    NUMBER='regexp:-?\d+(\.\d*)?'
    COMMENT='regexp://.*'
    COMMENTBLOCK='regexp:\/\*(\*(?!\/)|[^*])*\*\/'

    // Reserved words
    MISSION_START='MISSION_START'
    MISSION_END='MISSION_END'
    WHILE = 'WHILE'
    END_WHILE = 'ENDWHILE'
    IF = 'IF'
    END_IF = 'ENDIF'
    ELSE = 'ELSE'
    AND = 'AND'
    END = 'END'
    RETURN = 'RETURN'
    SET = 'SET'
    NOT = 'NOT'
    ON = 'ON'
    OFF = 'OFF'
    TRUE = 'TRUE'
    FALSE = 'FALSE'
    GOSUB = 'GOSUB'

    OPCODE='regexp:[A-Z_]+'
    GOSUB_IDENTIFIER='regexp:[a-z_0-9]+:'
    IDENTIFIER='regexp:\$?[a-zA-Z0-9_.]+'

    OP_PLUS_PLUS='++'
    OP_PLUS='+'
    OP_MINUS_MINUS='--'
    OP_MINUS='-'
    OP_TIMES='*'
    OP_DIVISION='/'
    OP_LESS_THAN='<'
    OP_GREATER_THAN='>'
    EQUALS='='
  ]
}

root ::= expression*
expression ::= (line_break | variable_definition | variable_assignment | subroutine_definition | subroutine_call | method_call | mission_block | if_expression | while_expression)

mission_block ::= MISSION_START expression* MISSION_END

subroutine_call ::= GOSUB subroutine_reference line_break
subroutine_reference ::= IDENTIFIER

subroutine_definition ::= subroutine_label subroutine_body subroutine_return
subroutine_label ::= GOSUB_IDENTIFIER line_break
subroutine_body ::= expression*
subroutine_return ::= RETURN

variable_assignment ::= variable '=' NUMBER line_break

method_call ::= method_name MethodParamList line_break
method_name ::= IDENTIFIER

variable_definition ::= Type variable (','? variable)* line_break
variable_list ::= variable linebreak | variable variable_list
variable ::= IDENTIFIER
line_break ::= NEW_LINE

if_expression ::= IF condition_list condition_body END_IF line_break
while_expression ::= WHILE condition and_condition* expression* END_WHILE line_break
and_condition ::= AND condition
condition_list ::= condition and_condition*
condition_body ::= expression*
condition ::= NOT? (method_call | comparison)
comparison ::= Param ComparisonOperator Param line_break

ScriptFile ::= Expression* MissionBlock? Expression*

MissionBlock ::= MISSION_START Expression* MISSION_END

Expression ::= SubroutineDefinition | VariableDefinition | VariableAssignment | MethodCall | LocalScope | IfExpression | WhileExpression | MathOperation | SubroutineCall

VariableDefinition ::= Type VariableIdentifierList
VariableIdentifierList ::= VariableIdentifier VariableIdentifierList | VariableIdentifier ',' VariableIdentifierList | VariableIdentifier
VariableIdentifier ::= IDENTIFIER

SubroutineDefinition ::= SubroutineLabel ':' Expression* RETURN {
    mixin="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElementImpl"
    implements="nl.shadowlink.mission.plugin.gta3script.psi.Gta3ScriptNamedElement"
    methods=[getNameIdentifier setName getName]
}
SubroutineLabel ::= IDENTIFIER

Type ::= VAR_INT | VAR_FLOAT

LocalScope ::= '{' Expression* '}'

VariableAssignment ::= VariableReference EQUALS Param
MathOperation ::= VariableReference MathOperator EQUALS Param

MethodParamList ::= Param*
MethodParam ::= Param

SubroutineCall ::= GOSUB SubroutineReference
SubroutineReference ::= IDENTIFIER {
    methods=[getReference]
}
VariableReference ::= IDENTIFIER {
    methods=[getReference]
}

Param ::= NUMBER | VariableReference | SUBROUTINE | Boolean | GxtReference

GxtReference ::= '(' IDENTIFIER ')'
Boolean ::= TRUE | FALSE | ON | OFF
MathOperator ::= OP_PLUS | OP_MINUS | OP_TIMES | OP_DIVISION
ComparisonOperator ::= '<' | '>' | '>=' | '<=' | '='

ConditionalStatement ::= NOT? (method_call | Comparison)
Comparison ::= Param ComparisonOperator Param

IfExpression ::= IF ConditionalStatement Expression* (ELSE Expression*)? END_IF
WhileExpression ::= WHILE ConditionalStatement Expression* END_WHILE