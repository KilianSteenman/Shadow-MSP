/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.shadowlink.mission.plugin.gta2;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>gta2_mis.flex</tt>
 */
public class _Gta2MissionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\11\0\1\34\1\32\1\0\1\33\1\4\1\6\2\3\1\42\7\3\1\7\6"+
    "\0\1\17\1\10\1\27\1\22\1\13\1\30\1\41\1\24\1\25\1\10\1\43\1\12\1\40\1\21\1"+
    "\37\1\35\1\10\1\20\1\15\1\16\1\31\1\14\1\23\1\26\1\36\1\10\4\0\1\11\1\0\32"+
    "\5\12\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\12\6\1\7\1\10\1\11\3\6\1\3\1\4\1\12"+
    "\1\13\10\6\1\14\4\6\1\15\4\6\1\16\1\17"+
    "\37\6\1\20\5\6\1\21\15\6\1\22\23\6\1\23"+
    "\1\24\3\6\1\25\1\6\1\26\21\6\1\27\3\6"+
    "\1\30\1\6\1\31\2\6\1\32\1\6\1\33\6\6"+
    "\1\34\13\6\1\35\2\6\1\36\2\6\1\37\1\6"+
    "\1\40\1\6\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\44\0\44\0\u02ac\0\u02d0\0\u02f4"+
    "\0\u0318\0\u033c\0\44\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0"+
    "\0\u0414\0\u0438\0\u045c\0\u0480\0\330\0\u04a4\0\u04c8\0\u04ec"+
    "\0\u0510\0\44\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\330"+
    "\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4"+
    "\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804"+
    "\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924"+
    "\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\330"+
    "\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40"+
    "\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60"+
    "\0\u0c84\0\u0ca8\0\u0ccc\0\330\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c"+
    "\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c"+
    "\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\330"+
    "\0\330\0\u0f9c\0\u0fc0\0\u0fe4\0\330\0\u1008\0\330\0\u102c"+
    "\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c"+
    "\0\330\0\u1290\0\u12b4\0\u12d8\0\330\0\u12fc\0\330\0\u1320"+
    "\0\u1344\0\330\0\u1368\0\330\0\u138c\0\u13b0\0\u13d4\0\u13f8"+
    "\0\u141c\0\u1440\0\330\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4"+
    "\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8\0\u15cc\0\330\0\u15f0"+
    "\0\u1614\0\44\0\u1638\0\u165c\0\330\0\u1680\0\330\0\u16a4"+
    "\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\2\7\1\17\1\7\1\20\1\7\1\21\1\22\1\7"+
    "\1\23\1\24\1\25\1\26\2\7\1\27\1\7\1\4"+
    "\1\30\45\0\2\3\44\0\1\4\1\31\1\32\3\0"+
    "\1\32\30\0\1\4\4\0\1\32\1\0\1\5\1\0"+
    "\1\33\1\0\1\5\30\0\1\32\7\0\1\34\45\0"+
    "\22\7\3\0\5\7\1\0\1\7\3\0\1\32\1\0"+
    "\1\5\1\0\1\33\1\7\1\10\20\7\3\0\5\7"+
    "\1\32\1\7\10\0\3\7\1\35\16\7\3\0\5\7"+
    "\1\0\1\7\10\0\11\7\1\36\10\7\3\0\5\7"+
    "\1\0\1\7\10\0\3\7\1\37\16\7\3\0\5\7"+
    "\1\0\1\7\10\0\14\7\1\40\1\41\4\7\3\0"+
    "\5\7\1\0\1\7\10\0\10\7\1\42\11\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\43\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\14\7\1\44\5\7\3\0"+
    "\5\7\1\0\1\7\10\0\20\7\1\45\1\7\3\0"+
    "\5\7\1\0\1\7\10\0\10\7\1\46\3\7\1\47"+
    "\5\7\3\0\2\7\1\50\2\7\1\0\1\7\10\0"+
    "\22\7\3\0\2\7\1\51\2\7\1\0\1\7\32\0"+
    "\1\52\21\0\2\7\1\53\17\7\3\0\5\7\1\0"+
    "\1\7\10\0\7\7\1\54\12\7\3\0\5\7\1\0"+
    "\1\7\10\0\15\7\1\55\4\7\3\0\5\7\1\0"+
    "\1\7\3\0\1\31\36\0\1\31\4\0\1\32\1\0"+
    "\1\32\3\0\1\32\30\0\1\32\1\0\1\34\1\0"+
    "\42\34\10\0\4\7\1\56\15\7\3\0\5\7\1\0"+
    "\1\7\10\0\12\7\1\57\7\7\3\0\5\7\1\0"+
    "\1\7\10\0\6\7\1\60\13\7\3\0\5\7\1\0"+
    "\1\7\10\0\10\7\1\61\11\7\3\0\5\7\1\0"+
    "\1\7\10\0\22\7\3\0\3\7\1\62\1\7\1\0"+
    "\1\7\10\0\3\7\1\63\16\7\3\0\5\7\1\0"+
    "\1\7\10\0\6\7\1\64\1\65\12\7\3\0\5\7"+
    "\1\0\1\7\10\0\15\7\1\66\4\7\3\0\5\7"+
    "\1\0\1\7\10\0\15\7\1\67\4\7\3\0\5\7"+
    "\1\0\1\7\10\0\7\7\1\70\12\7\3\0\5\7"+
    "\1\0\1\7\10\0\21\7\1\71\3\0\5\7\1\0"+
    "\1\7\10\0\10\7\1\72\11\7\3\0\5\7\1\0"+
    "\1\7\10\0\7\7\1\73\12\7\3\0\5\7\1\0"+
    "\1\7\10\0\17\7\1\74\2\7\3\0\5\7\1\0"+
    "\1\7\10\0\2\7\1\75\17\7\3\0\5\7\1\0"+
    "\1\7\10\0\3\7\1\76\16\7\3\0\5\7\1\0"+
    "\1\7\10\0\13\7\1\77\1\7\1\100\4\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\101\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\102\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\103\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\21\7\1\104\3\0\5\7"+
    "\1\0\1\7\10\0\17\7\1\105\2\7\3\0\5\7"+
    "\1\0\1\7\10\0\2\7\1\106\17\7\3\0\5\7"+
    "\1\0\1\7\10\0\22\7\3\0\3\7\1\107\1\7"+
    "\1\0\1\7\10\0\10\7\1\110\11\7\3\0\5\7"+
    "\1\0\1\7\10\0\11\7\1\111\10\7\3\0\5\7"+
    "\1\0\1\7\10\0\13\7\1\112\6\7\3\0\5\7"+
    "\1\0\1\7\10\0\22\7\3\0\1\7\1\113\3\7"+
    "\1\0\1\7\10\0\14\7\1\114\5\7\3\0\5\7"+
    "\1\0\1\7\10\0\2\7\1\115\17\7\3\0\5\7"+
    "\1\0\1\7\10\0\2\7\1\116\17\7\3\0\5\7"+
    "\1\0\1\7\10\0\14\7\1\117\5\7\3\0\5\7"+
    "\1\0\1\7\10\0\20\7\1\120\1\7\3\0\5\7"+
    "\1\0\1\7\10\0\7\7\1\121\12\7\3\0\5\7"+
    "\1\0\1\7\10\0\10\7\1\122\11\7\3\0\5\7"+
    "\1\0\1\7\10\0\1\7\1\123\20\7\3\0\5\7"+
    "\1\0\1\7\10\0\10\7\1\124\11\7\3\0\5\7"+
    "\1\0\1\7\10\0\6\7\1\125\13\7\3\0\5\7"+
    "\1\0\1\7\10\0\3\7\1\126\16\7\3\0\5\7"+
    "\1\0\1\7\10\0\15\7\1\127\4\7\3\0\5\7"+
    "\1\0\1\7\10\0\1\7\1\130\20\7\3\0\5\7"+
    "\1\0\1\7\10\0\6\7\1\131\13\7\3\0\5\7"+
    "\1\0\1\7\10\0\7\7\1\132\12\7\3\0\5\7"+
    "\1\0\1\7\10\0\3\7\1\133\16\7\3\0\5\7"+
    "\1\0\1\7\10\0\15\7\1\134\4\7\3\0\5\7"+
    "\1\0\1\7\10\0\1\7\1\135\20\7\3\0\5\7"+
    "\1\0\1\7\10\0\3\7\1\136\1\7\1\137\14\7"+
    "\3\0\5\7\1\0\1\7\10\0\15\7\1\140\4\7"+
    "\3\0\5\7\1\0\1\7\10\0\12\7\1\141\7\7"+
    "\3\0\5\7\1\0\1\7\10\0\1\7\1\142\20\7"+
    "\3\0\5\7\1\0\1\7\10\0\22\7\3\0\1\143"+
    "\4\7\1\0\1\7\10\0\11\7\1\144\10\7\3\0"+
    "\5\7\1\0\1\7\10\0\1\7\1\145\20\7\3\0"+
    "\5\7\1\0\1\7\10\0\1\7\1\146\20\7\3\0"+
    "\5\7\1\0\1\7\10\0\11\7\1\147\10\7\3\0"+
    "\5\7\1\0\1\7\10\0\12\7\1\150\7\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\151\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\10\7\1\152\11\7\3\0"+
    "\5\7\1\0\1\7\10\0\10\7\1\153\11\7\3\0"+
    "\5\7\1\0\1\7\10\0\11\7\1\154\10\7\3\0"+
    "\5\7\1\0\1\7\10\0\17\7\1\155\2\7\3\0"+
    "\5\7\1\0\1\7\10\0\11\7\1\156\10\7\3\0"+
    "\5\7\1\0\1\7\10\0\6\7\1\157\13\7\3\0"+
    "\5\7\1\0\1\7\10\0\2\7\1\160\17\7\3\0"+
    "\5\7\1\0\1\7\10\0\1\7\1\161\20\7\3\0"+
    "\5\7\1\0\1\7\10\0\12\7\1\162\7\7\3\0"+
    "\5\7\1\0\1\7\10\0\2\7\1\163\17\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\164\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\165\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\166\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\167\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\10\7\1\170\11\7\3\0"+
    "\5\7\1\0\1\7\10\0\12\7\1\171\7\7\3\0"+
    "\5\7\1\0\1\7\10\0\1\7\1\172\20\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\173\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\14\7\1\174\5\7\3\0"+
    "\5\7\1\0\1\7\10\0\12\7\1\175\7\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\176\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\3\7\1\177\16\7\3\0"+
    "\5\7\1\0\1\7\10\0\6\7\1\200\13\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\201\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\7\7\1\202\12\7\3\0"+
    "\5\7\1\0\1\7\10\0\5\7\1\203\14\7\3\0"+
    "\5\7\1\0\1\7\10\0\16\7\1\204\3\7\3\0"+
    "\5\7\1\0\1\7\10\0\2\7\1\205\17\7\3\0"+
    "\5\7\1\0\1\7\10\0\6\7\1\206\13\7\3\0"+
    "\5\7\1\0\1\7\10\0\22\7\3\0\1\207\4\7"+
    "\1\0\1\7\10\0\1\7\1\210\20\7\3\0\5\7"+
    "\1\0\1\7\10\0\7\7\1\211\12\7\3\0\5\7"+
    "\1\0\1\7\10\0\10\7\1\212\11\7\3\0\5\7"+
    "\1\0\1\7\10\0\10\7\1\213\11\7\3\0\5\7"+
    "\1\0\1\7\10\0\6\7\1\214\13\7\3\0\5\7"+
    "\1\0\1\7\10\0\22\7\3\0\1\7\1\215\3\7"+
    "\1\0\1\7\10\0\1\7\1\216\20\7\3\0\5\7"+
    "\1\0\1\7\10\0\3\7\1\217\16\7\3\0\5\7"+
    "\1\0\1\7\10\0\1\7\1\220\20\7\3\0\5\7"+
    "\1\0\1\7\10\0\7\7\1\221\12\7\3\0\5\7"+
    "\1\0\1\7\10\0\3\7\1\222\16\7\3\0\5\7"+
    "\1\0\1\7\10\0\22\7\3\0\4\7\1\223\1\0"+
    "\1\7\10\0\10\7\1\224\11\7\3\0\5\7\1\0"+
    "\1\7\10\0\6\7\1\225\13\7\3\0\5\7\1\0"+
    "\1\7\10\0\15\7\1\226\4\7\3\0\5\7\1\0"+
    "\1\7\10\0\7\7\1\227\12\7\3\0\5\7\1\0"+
    "\1\7\10\0\3\7\1\230\16\7\3\0\5\7\1\0"+
    "\1\7\10\0\11\7\1\231\10\7\3\0\5\7\1\0"+
    "\1\7\10\0\17\7\1\232\2\7\3\0\5\7\1\0"+
    "\1\7\10\0\6\7\1\233\13\7\3\0\5\7\1\0"+
    "\1\7\10\0\12\7\1\234\7\7\3\0\5\7\1\0"+
    "\1\7\10\0\21\7\1\235\3\0\5\7\1\0\1\7"+
    "\10\0\1\7\1\236\20\7\3\0\5\7\1\0\1\7"+
    "\10\0\22\7\3\0\4\7\1\237\1\0\1\7\10\0"+
    "\10\7\1\240\11\7\3\0\5\7\1\0\1\7\10\0"+
    "\22\7\3\0\2\7\1\241\2\7\1\0\1\7\10\0"+
    "\22\7\3\0\1\7\1\242\3\7\1\0\1\7\10\0"+
    "\11\7\1\243\10\7\3\0\5\7\1\0\1\7\10\0"+
    "\22\7\3\0\2\7\1\244\2\7\1\0\1\7\10\0"+
    "\22\7\3\0\4\7\1\245\1\0\1\7\10\0\1\7"+
    "\1\246\20\7\3\0\5\7\1\0\1\7\10\0\10\7"+
    "\1\247\11\7\3\0\5\7\1\0\1\7\10\0\22\7"+
    "\3\0\1\250\4\7\1\0\1\7\10\0\11\7\1\251"+
    "\10\7\3\0\5\7\1\0\1\7\10\0\3\7\1\252"+
    "\16\7\3\0\5\7\1\0\1\7\10\0\22\7\3\0"+
    "\2\7\1\253\2\7\1\0\1\7\10\0\22\7\3\0"+
    "\3\7\1\254\1\7\1\0\1\7\10\0\3\7\1\255"+
    "\16\7\3\0\5\7\1\0\1\7\10\0\1\7\1\256"+
    "\20\7\3\0\5\7\1\0\1\7\10\0\10\7\1\257"+
    "\11\7\3\0\5\7\1\0\1\7\10\0\11\7\1\260"+
    "\10\7\3\0\5\7\1\0\1\7\10\0\7\7\1\261"+
    "\12\7\3\0\5\7\1\0\1\7\10\0\22\7\3\0"+
    "\5\7\1\262\1\7\10\0\20\7\1\263\1\7\3\0"+
    "\5\7\1\0\1\7\10\0\2\7\1\264\17\7\3\0"+
    "\5\7\1\0\1\7\10\0\2\7\1\265\17\7\3\0"+
    "\5\7\1\0\1\7\10\0\22\7\3\0\2\7\1\266"+
    "\2\7\1\0\1\7\10\0\22\7\3\0\1\7\1\267"+
    "\3\7\1\0\1\7\10\0\22\7\3\0\2\7\1\270"+
    "\2\7\1\0\1\7\10\0\6\7\1\271\13\7\3\0"+
    "\5\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\2\11\5\1\1\11\16\1\1\11"+
    "\207\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _Gta2MissionLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _Gta2MissionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 34: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 35: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 36: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 37: break;
          case 5: 
            { return OP_4;
            } 
            // fall through
          case 38: break;
          case 6: 
            { return METHOD;
            } 
            // fall through
          case 39: break;
          case 7: 
            { return OP_1;
            } 
            // fall through
          case 40: break;
          case 8: 
            { return OP_2;
            } 
            // fall through
          case 41: break;
          case 9: 
            { return OP_3;
            } 
            // fall through
          case 42: break;
          case 10: 
            { return SUBROUTINE;
            } 
            // fall through
          case 43: break;
          case 11: 
            { return COMMENT;
            } 
            // fall through
          case 44: break;
          case 12: 
            { return IF;
            } 
            // fall through
          case 45: break;
          case 13: 
            { return OP_PLUS_PLUS;
            } 
            // fall through
          case 46: break;
          case 14: 
            { return END;
            } 
            // fall through
          case 47: break;
          case 15: 
            { return SET;
            } 
            // fall through
          case 48: break;
          case 16: 
            { return END_IF;
            } 
            // fall through
          case 49: break;
          case 17: 
            { return WHILE;
            } 
            // fall through
          case 50: break;
          case 18: 
            { return RETURN;
            } 
            // fall through
          case 51: break;
          case 19: 
            { return COUNTER;
            } 
            // fall through
          case 52: break;
          case 20: 
            { return FORWARD;
            } 
            // fall through
          case 53: break;
          case 21: 
            { return LEVEL_END;
            } 
            // fall through
          case 54: break;
          case 22: 
            { return END_WHILE;
            } 
            // fall through
          case 55: break;
          case 23: 
            { return CHAR_DATA;
            } 
            // fall through
          case 56: break;
          case 24: 
            { return LEVEL_START;
            } 
            // fall through
          case 57: break;
          case 25: 
            { return TIMER_DATA;
            } 
            // fall through
          case 58: break;
          case 26: 
            { return WHILE_EXEC;
            } 
            // fall through
          case 59: break;
          case 27: 
            { return PLAYER_PED;
            } 
            // fall through
          case 60: break;
          case 28: 
            { return MACHINE_GUN;
            } 
            // fall through
          case 61: break;
          case 29: 
            { return THREAD_TRIGGER;
            } 
            // fall through
          case 62: break;
          case 30: 
            { return CRIMINAL_TYPE2;
            } 
            // fall through
          case 63: break;
          case 31: 
            { return REACT_AS_NORMAL;
            } 
            // fall through
          case 64: break;
          case 32: 
            { return AREA_PLAYER_ONLY;
            } 
            // fall through
          case 65: break;
          case 33: 
            { return KILL_CHAR_ON_FOOT;
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
