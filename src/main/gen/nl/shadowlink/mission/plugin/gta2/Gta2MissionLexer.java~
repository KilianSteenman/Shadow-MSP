/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.shadowlink.mission.plugin.gta2;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>gta2_mis.flex</tt>
 */
public class Gta2MissionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\11\0\1\10\1\35\2\0\1\4\1\6\2\3\1\41\7\3\1\7\6\0\1\20"+
    "\1\11\1\32\1\23\1\14\1\33\1\40\1\30\1\25\1\11\1\42\1\13\1\24\1\22\1\26\1\36"+
    "\1\11\1\21\1\16\1\17\1\34\1\15\1\27\1\31\1\37\1\11\4\0\1\12\1\0\32\5\12\0"+
    "\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\4"+
    "\15\5\1\1\2\5\1\3\1\4\1\6\1\7\1\10"+
    "\14\5\1\11\1\12\7\5\1\13\2\5\1\10\2\5"+
    "\1\14\1\15\3\5\1\16\2\5\1\17\2\5\1\20"+
    "\10\5\1\10\1\5\1\21\24\5\1\22\10\5\1\23"+
    "\16\5\1\24\30\5\1\25\1\5\1\26\2\5\1\27"+
    "\2\5\1\30\10\5\1\31\17\5\1\32\2\5\1\33"+
    "\1\5\1\34\4\5\1\35\1\5\1\36\1\5\1\37"+
    "\5\5\1\40\7\5\1\41\10\5\1\42\1\43\2\5"+
    "\1\44\2\5\1\45\1\5\1\46\1\5\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325"+
    "\0\u0348\0\u036b\0\43\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u0555\0\322\0\322\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604"+
    "\0\u0627\0\u064a\0\43\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9"+
    "\0\u071c\0\322\0\u073f\0\u0762\0\u0785\0\322\0\u07a8\0\u07cb"+
    "\0\322\0\u07ee\0\u0811\0\322\0\u0834\0\u0857\0\u087a\0\u089d"+
    "\0\u08c0\0\u08e3\0\u0906\0\u0929\0\43\0\u094c\0\322\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\322\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94"+
    "\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac"+
    "\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4"+
    "\0\u0ee7\0\u0f0a\0\u0f2d\0\322\0\u0f50\0\u0f73\0\u0f96\0\u0fb9"+
    "\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1"+
    "\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9"+
    "\0\u120c\0\u122f\0\u1252\0\u1275\0\322\0\u1298\0\322\0\u12bb"+
    "\0\u12de\0\322\0\u1301\0\u1324\0\322\0\u1347\0\u136a\0\u138d"+
    "\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\322\0\u145f\0\u1482"+
    "\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531\0\u1554\0\u1577\0\u159a"+
    "\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\322\0\u166c\0\u168f"+
    "\0\322\0\u16b2\0\322\0\u16d5\0\u16f8\0\u171b\0\u173e\0\322"+
    "\0\u1761\0\322\0\u1784\0\322\0\u17a7\0\u17ca\0\u17ed\0\u1810"+
    "\0\u1833\0\322\0\u1856\0\u1879\0\u189c\0\u18bf\0\u18e2\0\u1905"+
    "\0\u1928\0\322\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7\0\u19fa"+
    "\0\u1a1d\0\u1a40\0\322\0\322\0\u1a63\0\u1a86\0\43\0\u1aa9"+
    "\0\u1acc\0\322\0\u1aef\0\322\0\u1b12\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\2\2\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\1\17\1\7\1\20\1\21\1\22\1\23\2\7\1\24"+
    "\1\25\1\7\1\26\1\27\2\7\1\4\1\30\44\0"+
    "\2\3\43\0\1\4\1\31\1\32\4\0\1\32\26\0"+
    "\1\4\4\0\1\32\1\0\1\5\1\0\1\33\2\0"+
    "\1\5\26\0\1\32\7\0\1\34\1\0\1\35\43\0"+
    "\24\7\1\0\3\7\1\0\1\7\3\0\1\32\1\0"+
    "\1\5\1\0\1\33\1\0\1\7\1\10\22\7\1\0"+
    "\3\7\1\32\1\7\11\0\3\7\1\36\20\7\1\0"+
    "\3\7\1\0\1\7\11\0\2\7\1\37\6\7\1\40"+
    "\12\7\1\0\3\7\1\0\1\7\11\0\3\7\1\41"+
    "\20\7\1\0\3\7\1\0\1\7\11\0\14\7\1\42"+
    "\2\7\1\43\4\7\1\0\3\7\1\0\1\7\11\0"+
    "\10\7\1\44\1\45\12\7\1\0\3\7\1\0\1\7"+
    "\11\0\3\7\1\46\20\7\1\0\3\7\1\0\1\7"+
    "\11\0\15\7\1\47\6\7\1\0\3\7\1\0\1\7"+
    "\11\0\7\7\1\50\4\7\1\51\7\7\1\0\3\7"+
    "\1\0\1\7\11\0\22\7\1\52\1\7\1\0\3\7"+
    "\1\0\1\7\11\0\11\7\1\53\10\7\1\54\1\7"+
    "\1\0\3\7\1\0\1\7\11\0\17\7\1\55\4\7"+
    "\1\0\3\7\1\0\1\7\11\0\7\7\1\56\1\57"+
    "\4\7\1\60\1\7\1\61\4\7\1\0\3\7\1\0"+
    "\1\7\11\0\15\7\1\62\6\7\1\0\3\7\1\0"+
    "\1\7\35\0\1\63\16\0\2\7\1\64\21\7\1\0"+
    "\3\7\1\0\1\7\11\0\14\7\1\65\7\7\1\0"+
    "\3\7\1\0\1\7\3\0\1\31\35\0\1\31\4\0"+
    "\1\32\1\0\1\32\4\0\1\32\26\0\1\32\1\0"+
    "\1\34\1\0\41\34\10\35\1\66\32\35\11\0\4\7"+
    "\1\67\17\7\1\0\3\7\1\0\1\7\11\0\5\7"+
    "\1\70\16\7\1\0\3\7\1\0\1\7\11\0\12\7"+
    "\1\71\11\7\1\0\3\7\1\0\1\7\11\0\6\7"+
    "\1\72\15\7\1\0\3\7\1\0\1\7\11\0\13\7"+
    "\1\73\10\7\1\0\3\7\1\0\1\7\11\0\10\7"+
    "\1\74\13\7\1\0\3\7\1\0\1\7\11\0\3\7"+
    "\1\75\20\7\1\0\3\7\1\0\1\7\11\0\12\7"+
    "\1\76\11\7\1\0\3\7\1\0\1\7\11\0\6\7"+
    "\1\77\1\100\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\6\7\1\101\15\7\1\0\3\7\1\0\1\7\11\0"+
    "\21\7\1\102\2\7\1\0\3\7\1\0\1\7\11\0"+
    "\5\7\1\103\16\7\1\0\3\7\1\0\1\7\11\0"+
    "\22\7\1\104\1\7\1\0\3\7\1\0\1\7\11\0"+
    "\14\7\1\105\7\7\1\0\3\7\1\0\1\7\11\0"+
    "\10\7\1\106\13\7\1\0\3\7\1\0\1\7\11\0"+
    "\14\7\1\107\7\7\1\0\3\7\1\0\1\7\11\0"+
    "\23\7\1\110\1\0\3\7\1\0\1\7\11\0\7\7"+
    "\1\111\14\7\1\0\3\7\1\0\1\7\11\0\10\7"+
    "\1\112\13\7\1\0\3\7\1\0\1\7\11\0\7\7"+
    "\1\113\14\7\1\0\3\7\1\0\1\7\11\0\2\7"+
    "\1\114\21\7\1\0\3\7\1\0\1\7\6\35\1\115"+
    "\1\35\1\66\32\35\11\0\3\7\1\116\20\7\1\0"+
    "\3\7\1\0\1\7\11\0\3\7\1\117\20\7\1\0"+
    "\3\7\1\0\1\7\11\0\1\7\1\120\12\7\1\121"+
    "\1\7\1\122\5\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\123\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\124\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\125\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\23\7\1\126\1\0\3\7\1\0\1\7\11\0\21\7"+
    "\1\127\2\7\1\0\3\7\1\0\1\7\11\0\17\7"+
    "\1\130\4\7\1\0\3\7\1\0\1\7\11\0\5\7"+
    "\1\131\16\7\1\0\3\7\1\0\1\7\11\0\2\7"+
    "\1\132\21\7\1\0\3\7\1\0\1\7\11\0\1\7"+
    "\1\133\22\7\1\0\3\7\1\0\1\7\11\0\13\7"+
    "\1\134\10\7\1\0\3\7\1\0\1\7\11\0\11\7"+
    "\1\135\12\7\1\0\3\7\1\0\1\7\11\0\10\7"+
    "\1\136\13\7\1\0\3\7\1\0\1\7\11\0\16\7"+
    "\1\137\5\7\1\0\3\7\1\0\1\7\11\0\24\7"+
    "\1\0\1\7\1\140\1\7\1\0\1\7\11\0\2\7"+
    "\1\141\21\7\1\0\3\7\1\0\1\7\11\0\2\7"+
    "\1\142\21\7\1\0\3\7\1\0\1\7\11\0\16\7"+
    "\1\143\5\7\1\0\3\7\1\0\1\7\11\0\22\7"+
    "\1\144\1\7\1\0\3\7\1\0\1\7\11\0\17\7"+
    "\1\145\4\7\1\0\3\7\1\0\1\7\11\0\10\7"+
    "\1\146\13\7\1\0\3\7\1\0\1\7\11\0\7\7"+
    "\1\147\14\7\1\0\3\7\1\0\1\7\11\0\1\7"+
    "\1\150\22\7\1\0\3\7\1\0\1\7\11\0\10\7"+
    "\1\151\13\7\1\0\3\7\1\0\1\7\11\0\6\7"+
    "\1\152\15\7\1\0\3\7\1\0\1\7\11\0\14\7"+
    "\1\153\7\7\1\0\3\7\1\0\1\7\11\0\14\7"+
    "\1\154\7\7\1\0\3\7\1\0\1\7\11\0\3\7"+
    "\1\155\20\7\1\0\3\7\1\0\1\7\11\0\12\7"+
    "\1\156\11\7\1\0\3\7\1\0\1\7\11\0\14\7"+
    "\1\157\7\7\1\0\3\7\1\0\1\7\11\0\6\7"+
    "\1\160\15\7\1\0\3\7\1\0\1\7\11\0\1\7"+
    "\1\161\22\7\1\0\3\7\1\0\1\7\11\0\7\7"+
    "\1\162\14\7\1\0\3\7\1\0\1\7\11\0\3\7"+
    "\1\163\20\7\1\0\3\7\1\0\1\7\11\0\1\7"+
    "\1\164\22\7\1\0\3\7\1\0\1\7\11\0\3\7"+
    "\1\165\1\7\1\166\16\7\1\0\3\7\1\0\1\7"+
    "\11\0\17\7\1\167\4\7\1\0\3\7\1\0\1\7"+
    "\11\0\14\7\1\170\7\7\1\0\3\7\1\0\1\7"+
    "\11\0\1\7\1\171\22\7\1\0\3\7\1\0\1\7"+
    "\11\0\12\7\1\172\11\7\1\0\3\7\1\0\1\7"+
    "\11\0\24\7\1\0\1\173\2\7\1\0\1\7\11\0"+
    "\11\7\1\174\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\175\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\11\7\1\176\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\15\7\1\177\6\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\200\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\201\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\11\7\1\202\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\203\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\12\7\1\204\11\7\1\0\3\7\1\0\1\7\11\0"+
    "\10\7\1\205\13\7\1\0\3\7\1\0\1\7\11\0"+
    "\10\7\1\206\13\7\1\0\3\7\1\0\1\7\11\0"+
    "\21\7\1\207\2\7\1\0\3\7\1\0\1\7\11\0"+
    "\11\7\1\210\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\6\7\1\211\15\7\1\0\3\7\1\0\1\7\11\0"+
    "\14\7\1\212\7\7\1\0\3\7\1\0\1\7\11\0"+
    "\2\7\1\213\21\7\1\0\3\7\1\0\1\7\11\0"+
    "\12\7\1\214\11\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\215\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\2\7\1\216\21\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\217\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\220\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\11\7\1\221\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\222\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\6\7\1\223\15\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\224\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\10\7\1\225\13\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\226\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\12\7\1\227\11\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\230\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\17\7\1\231\4\7\1\0\3\7\1\0\1\7\11\0"+
    "\12\7\1\232\11\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\233\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\2\7\1\234\21\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\235\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\236\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\6\7\1\237\15\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\240\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\5\7\1\241\16\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\242\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\243\1\7\1\244\16\7\1\0\3\7\1\0"+
    "\1\7\11\0\20\7\1\245\3\7\1\0\3\7\1\0"+
    "\1\7\11\0\7\7\1\246\14\7\1\0\3\7\1\0"+
    "\1\7\11\0\2\7\1\247\21\7\1\0\3\7\1\0"+
    "\1\7\11\0\6\7\1\250\15\7\1\0\3\7\1\0"+
    "\1\7\11\0\24\7\1\0\1\251\2\7\1\0\1\7"+
    "\11\0\7\7\1\252\14\7\1\0\3\7\1\0\1\7"+
    "\11\0\10\7\1\253\13\7\1\0\3\7\1\0\1\7"+
    "\11\0\3\7\1\254\20\7\1\0\3\7\1\0\1\7"+
    "\11\0\6\7\1\255\15\7\1\0\3\7\1\0\1\7"+
    "\11\0\10\7\1\256\13\7\1\0\3\7\1\0\1\7"+
    "\11\0\24\7\1\0\1\7\1\257\1\7\1\0\1\7"+
    "\11\0\1\7\1\260\22\7\1\0\3\7\1\0\1\7"+
    "\11\0\24\7\1\0\2\7\1\261\1\0\1\7\11\0"+
    "\11\7\1\262\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\6\7\1\263\15\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\264\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\265\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\266\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\267\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\10\7\1\270\13\7\1\0\3\7\1\0\1\7\11\0"+
    "\6\7\1\271\15\7\1\0\3\7\1\0\1\7\11\0"+
    "\1\7\1\272\22\7\1\0\3\7\1\0\1\7\11\0"+
    "\7\7\1\273\14\7\1\0\3\7\1\0\1\7\11\0"+
    "\14\7\1\274\7\7\1\0\3\7\1\0\1\7\11\0"+
    "\3\7\1\275\20\7\1\0\3\7\1\0\1\7\11\0"+
    "\11\7\1\276\12\7\1\0\3\7\1\0\1\7\11\0"+
    "\23\7\1\277\1\0\3\7\1\0\1\7\11\0\12\7"+
    "\1\300\11\7\1\0\3\7\1\0\1\7\11\0\7\7"+
    "\1\301\14\7\1\0\3\7\1\0\1\7\11\0\21\7"+
    "\1\302\2\7\1\0\3\7\1\0\1\7\11\0\6\7"+
    "\1\303\15\7\1\0\3\7\1\0\1\7\11\0\12\7"+
    "\1\304\11\7\1\0\3\7\1\0\1\7\11\0\1\7"+
    "\1\305\22\7\1\0\3\7\1\0\1\7\11\0\3\7"+
    "\1\306\20\7\1\0\3\7\1\0\1\7\11\0\24\7"+
    "\1\0\2\7\1\307\1\0\1\7\11\0\10\7\1\310"+
    "\13\7\1\0\3\7\1\0\1\7\11\0\15\7\1\311"+
    "\6\7\1\0\3\7\1\0\1\7\11\0\11\7\1\312"+
    "\12\7\1\0\3\7\1\0\1\7\11\0\10\7\1\313"+
    "\13\7\1\0\3\7\1\0\1\7\11\0\24\7\1\0"+
    "\1\7\1\314\1\7\1\0\1\7\11\0\15\7\1\315"+
    "\6\7\1\0\3\7\1\0\1\7\11\0\20\7\1\316"+
    "\3\7\1\0\3\7\1\0\1\7\11\0\24\7\1\0"+
    "\2\7\1\317\1\0\1\7\11\0\1\7\1\320\22\7"+
    "\1\0\3\7\1\0\1\7\11\0\10\7\1\321\13\7"+
    "\1\0\3\7\1\0\1\7\11\0\6\7\1\322\15\7"+
    "\1\0\3\7\1\0\1\7\11\0\24\7\1\0\1\323"+
    "\2\7\1\0\1\7\11\0\11\7\1\324\12\7\1\0"+
    "\3\7\1\0\1\7\11\0\3\7\1\325\20\7\1\0"+
    "\3\7\1\0\1\7\11\0\3\7\1\326\20\7\1\0"+
    "\3\7\1\0\1\7\11\0\15\7\1\327\6\7\1\0"+
    "\3\7\1\0\1\7\11\0\13\7\1\330\10\7\1\0"+
    "\3\7\1\0\1\7\11\0\3\7\1\331\20\7\1\0"+
    "\3\7\1\0\1\7\11\0\1\7\1\332\22\7\1\0"+
    "\3\7\1\0\1\7\11\0\21\7\1\333\2\7\1\0"+
    "\3\7\1\0\1\7\11\0\10\7\1\334\13\7\1\0"+
    "\3\7\1\0\1\7\11\0\11\7\1\335\12\7\1\0"+
    "\3\7\1\0\1\7\11\0\7\7\1\336\14\7\1\0"+
    "\3\7\1\0\1\7\11\0\24\7\1\0\3\7\1\337"+
    "\1\7\11\0\22\7\1\340\1\7\1\0\3\7\1\0"+
    "\1\7\11\0\2\7\1\341\21\7\1\0\3\7\1\0"+
    "\1\7\11\0\2\7\1\342\21\7\1\0\3\7\1\0"+
    "\1\7\11\0\15\7\1\343\6\7\1\0\3\7\1\0"+
    "\1\7\11\0\24\7\1\0\1\7\1\344\1\7\1\0"+
    "\1\7\11\0\15\7\1\345\6\7\1\0\3\7\1\0"+
    "\1\7\11\0\6\7\1\346\15\7\1\0\3\7\1\0"+
    "\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6965];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\27\1\1\11\31\1\1\11"+
    "\221\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public Gta2MissionLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Gta2MissionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return METHOD;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return SUBROUTINE;
            } 
            // fall through
          case 45: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return COMMENT_BLOCK;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return IF;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return ON;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return OP_PLUS_PLUS;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return END;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return SET;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return AND;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return NOT;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return OFF;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return ELSE;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return END_IF;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return WHILE;
            } 
            // fall through
          case 58: break;
          case 20: 
            { return RETURN;
            } 
            // fall through
          case 59: break;
          case 21: 
            { return COUNTER;
            } 
            // fall through
          case 60: break;
          case 22: 
            { return FORWARD;
            } 
            // fall through
          case 61: break;
          case 23: 
            { return LEVEL_END;
            } 
            // fall through
          case 62: break;
          case 24: 
            { return END_WHILE;
            } 
            // fall through
          case 63: break;
          case 25: 
            { return CAR_DATA;
            } 
            // fall through
          case 64: break;
          case 26: 
            { return CHAR_DATA;
            } 
            // fall through
          case 65: break;
          case 27: 
            { return LEVEL_START;
            } 
            // fall through
          case 66: break;
          case 28: 
            { return TIMER_DATA;
            } 
            // fall through
          case 67: break;
          case 29: 
            { return MISSION_END;
            } 
            // fall through
          case 68: break;
          case 30: 
            { return WHILE_EXEC;
            } 
            // fall through
          case 69: break;
          case 31: 
            { return PLAYER_PED;
            } 
            // fall through
          case 70: break;
          case 32: 
            { return MACHINE_GUN;
            } 
            // fall through
          case 71: break;
          case 33: 
            { return MISSION_START;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return END_WHILE_EXEC;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return THREAD_TRIGGER;
            } 
            // fall through
          case 74: break;
          case 36: 
            { return CRIMINAL_TYPE2;
            } 
            // fall through
          case 75: break;
          case 37: 
            { return REACT_AS_NORMAL;
            } 
            // fall through
          case 76: break;
          case 38: 
            { return AREA_PLAYER_ONLY;
            } 
            // fall through
          case 77: break;
          case 39: 
            { return KILL_CHAR_ON_FOOT;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
