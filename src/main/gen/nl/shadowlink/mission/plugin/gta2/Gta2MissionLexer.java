/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.shadowlink.mission.plugin.gta2;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>gta2_mis.flex</tt>
 */
public class Gta2MissionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\11\0\1\10\1\37\2\0\1\4\1\6\2\3\1\42\7\3\1\7\6\0\1\20"+
    "\1\36\1\32\1\23\1\14\1\33\1\35\1\30\1\25\1\11\1\43\1\13\1\24\1\22\1\26\1\40"+
    "\1\11\1\21\1\16\1\17\1\34\1\15\1\27\1\31\1\41\1\11\4\0\1\12\1\0\32\5\12\0"+
    "\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\4"+
    "\17\5\1\1\2\5\1\3\1\6\1\7\1\10\14\5"+
    "\1\11\1\12\11\5\1\13\2\5\1\10\2\5\1\14"+
    "\1\15\3\5\1\16\2\5\1\17\3\5\1\20\12\5"+
    "\1\10\1\5\1\21\27\5\1\22\11\5\1\23\5\5"+
    "\1\24\1\25\11\5\1\26\32\5\1\27\1\5\1\30"+
    "\2\5\1\31\2\5\1\32\11\5\1\33\20\5\1\34"+
    "\2\5\1\35\1\5\1\36\4\5\1\37\2\5\1\40"+
    "\1\5\1\41\5\5\1\42\10\5\1\43\12\5\1\44"+
    "\1\45\3\5\1\46\2\5\1\47\2\5\1\50\1\51"+
    "\1\5\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\44\0\u03cc\0\u03f0\0\u0414\0\u0438"+
    "\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558"+
    "\0\u057c\0\u05a0\0\330\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\44\0\u072c\0\u0750"+
    "\0\u0774\0\u0798\0\u07bc\0\u07e0\0\330\0\u0804\0\u0828\0\u084c"+
    "\0\330\0\u0870\0\u0894\0\330\0\u08b8\0\u08dc\0\u0900\0\330"+
    "\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20"+
    "\0\u0a44\0\u0a68\0\44\0\u0a8c\0\330\0\u0ab0\0\u0ad4\0\u0af8"+
    "\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18"+
    "\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38"+
    "\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\330\0\u0dec\0\u0e10\0\u0e34"+
    "\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54"+
    "\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4\0\330\0\330\0\u1008\0\u102c"+
    "\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\330"+
    "\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248"+
    "\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368"+
    "\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488"+
    "\0\u14ac\0\u14d0\0\330\0\u14f4\0\330\0\u1518\0\u153c\0\330"+
    "\0\u1560\0\u1584\0\330\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638"+
    "\0\u165c\0\u1680\0\u16a4\0\u16c8\0\330\0\u16ec\0\u1710\0\u1734"+
    "\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854"+
    "\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908\0\330\0\u192c\0\u1950"+
    "\0\330\0\u1974\0\330\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\330"+
    "\0\u1a28\0\u1a4c\0\330\0\u1a70\0\330\0\u1a94\0\u1ab8\0\u1adc"+
    "\0\u1b00\0\u1b24\0\330\0\u1b48\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8"+
    "\0\u1bfc\0\u1c20\0\u1c44\0\330\0\u1c68\0\u1c8c\0\u1cb0\0\u1cd4"+
    "\0\u1cf8\0\u1d1c\0\u1d40\0\u1d64\0\u1d88\0\u1dac\0\330\0\330"+
    "\0\u1dd0\0\u1df4\0\u1e18\0\44\0\u1e3c\0\u1e60\0\330\0\u1e84"+
    "\0\u1ea8\0\330\0\330\0\u1ecc\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\2\2\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\1\17\1\7\1\20\1\21\1\22\1\23\2\7\1\24"+
    "\1\25\1\7\1\26\1\27\1\30\1\31\1\7\1\4"+
    "\1\32\45\0\2\3\44\0\1\4\1\33\1\5\1\0"+
    "\1\34\2\0\1\5\27\0\1\4\4\0\1\5\1\0"+
    "\1\5\1\0\1\34\2\0\1\5\27\0\1\5\7\0"+
    "\1\35\1\0\1\36\44\0\26\7\1\0\2\7\1\0"+
    "\1\7\3\0\1\5\1\0\1\5\1\0\1\34\1\0"+
    "\1\7\1\10\24\7\1\0\2\7\1\5\1\7\11\0"+
    "\3\7\1\37\22\7\1\0\2\7\1\0\1\7\11\0"+
    "\2\7\1\40\6\7\1\41\14\7\1\0\2\7\1\0"+
    "\1\7\11\0\3\7\1\42\22\7\1\0\2\7\1\0"+
    "\1\7\11\0\14\7\1\43\2\7\1\44\6\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\45\1\46\14\7"+
    "\1\0\2\7\1\0\1\7\11\0\3\7\1\47\22\7"+
    "\1\0\2\7\1\0\1\7\11\0\15\7\1\50\10\7"+
    "\1\0\2\7\1\0\1\7\11\0\7\7\1\51\4\7"+
    "\1\52\11\7\1\0\2\7\1\0\1\7\11\0\22\7"+
    "\1\53\3\7\1\0\2\7\1\0\1\7\11\0\11\7"+
    "\1\54\10\7\1\55\3\7\1\0\2\7\1\0\1\7"+
    "\11\0\17\7\1\56\6\7\1\0\2\7\1\0\1\7"+
    "\11\0\7\7\1\57\1\60\4\7\1\61\1\7\1\62"+
    "\6\7\1\0\2\7\1\0\1\7\11\0\15\7\1\63"+
    "\10\7\1\0\2\7\1\0\1\7\11\0\15\7\1\64"+
    "\10\7\1\0\2\7\1\0\1\7\11\0\15\7\1\65"+
    "\10\7\1\0\2\7\1\0\1\7\37\0\1\66\15\0"+
    "\2\7\1\67\23\7\1\0\2\7\1\0\1\7\11\0"+
    "\14\7\1\70\11\7\1\0\2\7\1\0\1\7\3\0"+
    "\1\33\36\0\1\33\1\0\1\35\1\0\42\35\10\36"+
    "\1\71\33\36\11\0\4\7\1\72\21\7\1\0\2\7"+
    "\1\0\1\7\11\0\5\7\1\73\20\7\1\0\2\7"+
    "\1\0\1\7\11\0\12\7\1\74\13\7\1\0\2\7"+
    "\1\0\1\7\11\0\6\7\1\75\17\7\1\0\2\7"+
    "\1\0\1\7\11\0\13\7\1\76\12\7\1\0\2\7"+
    "\1\0\1\7\11\0\10\7\1\77\15\7\1\0\2\7"+
    "\1\0\1\7\11\0\3\7\1\100\22\7\1\0\2\7"+
    "\1\0\1\7\11\0\12\7\1\101\13\7\1\0\2\7"+
    "\1\0\1\7\11\0\6\7\1\102\1\103\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\104\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\21\7\1\105\4\7\1\0"+
    "\2\7\1\0\1\7\11\0\5\7\1\106\20\7\1\0"+
    "\2\7\1\0\1\7\11\0\5\7\1\107\20\7\1\0"+
    "\2\7\1\0\1\7\11\0\22\7\1\110\3\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\111\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\112\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\113\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\23\7\1\114\2\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\115\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\116\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\5\7\1\117\20\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\120\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\121\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\2\7\1\122\23\7\1\0"+
    "\2\7\1\0\1\7\6\36\1\123\1\36\1\71\33\36"+
    "\11\0\3\7\1\124\22\7\1\0\2\7\1\0\1\7"+
    "\11\0\3\7\1\125\22\7\1\0\2\7\1\0\1\7"+
    "\11\0\1\7\1\126\12\7\1\127\1\7\1\130\7\7"+
    "\1\0\2\7\1\0\1\7\11\0\3\7\1\131\22\7"+
    "\1\0\2\7\1\0\1\7\11\0\3\7\1\132\22\7"+
    "\1\0\2\7\1\0\1\7\11\0\7\7\1\133\16\7"+
    "\1\0\2\7\1\0\1\7\11\0\23\7\1\134\2\7"+
    "\1\0\2\7\1\0\1\7\11\0\21\7\1\135\4\7"+
    "\1\0\2\7\1\0\1\7\11\0\17\7\1\136\6\7"+
    "\1\0\2\7\1\0\1\7\11\0\5\7\1\137\20\7"+
    "\1\0\2\7\1\0\1\7\11\0\21\7\1\140\4\7"+
    "\1\0\2\7\1\0\1\7\11\0\2\7\1\141\23\7"+
    "\1\0\2\7\1\0\1\7\11\0\1\7\1\142\24\7"+
    "\1\0\2\7\1\0\1\7\11\0\13\7\1\143\12\7"+
    "\1\0\2\7\1\0\1\7\11\0\11\7\1\144\14\7"+
    "\1\0\2\7\1\0\1\7\11\0\10\7\1\145\15\7"+
    "\1\0\2\7\1\0\1\7\11\0\16\7\1\146\7\7"+
    "\1\0\2\7\1\0\1\7\11\0\23\7\1\147\2\7"+
    "\1\0\2\7\1\0\1\7\11\0\23\7\1\150\2\7"+
    "\1\0\2\7\1\0\1\7\11\0\26\7\1\0\1\7"+
    "\1\151\1\0\1\7\11\0\2\7\1\152\23\7\1\0"+
    "\2\7\1\0\1\7\11\0\2\7\1\153\23\7\1\0"+
    "\2\7\1\0\1\7\11\0\16\7\1\154\7\7\1\0"+
    "\2\7\1\0\1\7\11\0\22\7\1\155\3\7\1\0"+
    "\2\7\1\0\1\7\11\0\17\7\1\156\6\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\157\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\160\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\161\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\162\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\163\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\164\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\165\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\166\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\167\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\170\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\171\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\172\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\173\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\174\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\25\7\1\175\1\0\2\7"+
    "\1\0\1\7\11\0\5\7\1\176\20\7\1\0\2\7"+
    "\1\0\1\7\11\0\3\7\1\177\22\7\1\0\2\7"+
    "\1\0\1\7\11\0\1\7\1\200\24\7\1\0\2\7"+
    "\1\0\1\7\11\0\3\7\1\201\1\7\1\202\20\7"+
    "\1\0\2\7\1\0\1\7\11\0\17\7\1\203\6\7"+
    "\1\0\2\7\1\0\1\7\11\0\14\7\1\204\11\7"+
    "\1\0\2\7\1\0\1\7\11\0\1\7\1\205\24\7"+
    "\1\0\2\7\1\0\1\7\11\0\12\7\1\206\13\7"+
    "\1\0\2\7\1\0\1\7\11\0\26\7\1\0\1\207"+
    "\1\7\1\0\1\7\11\0\11\7\1\210\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\211\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\212\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\15\7\1\213\10\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\214\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\215\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\216\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\217\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\220\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\221\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\222\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\223\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\21\7\1\224\4\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\225\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\226\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\227\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\2\7\1\230\23\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\231\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\232\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\2\7\1\233\23\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\234\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\235\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\236\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\237\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\240\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\241\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\242\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\243\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\244\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\245\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\246\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\17\7\1\247\6\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\250\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\251\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\2\7\1\252\23\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\253\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\254\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\255\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\256\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\5\7\1\257\20\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\260\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\261\1\7\1\262"+
    "\20\7\1\0\2\7\1\0\1\7\11\0\11\7\1\263"+
    "\14\7\1\0\2\7\1\0\1\7\11\0\20\7\1\264"+
    "\5\7\1\0\2\7\1\0\1\7\11\0\7\7\1\265"+
    "\16\7\1\0\2\7\1\0\1\7\11\0\2\7\1\266"+
    "\23\7\1\0\2\7\1\0\1\7\11\0\6\7\1\267"+
    "\17\7\1\0\2\7\1\0\1\7\11\0\26\7\1\0"+
    "\1\270\1\7\1\0\1\7\11\0\7\7\1\271\16\7"+
    "\1\0\2\7\1\0\1\7\11\0\10\7\1\272\15\7"+
    "\1\0\2\7\1\0\1\7\11\0\3\7\1\273\22\7"+
    "\1\0\2\7\1\0\1\7\11\0\6\7\1\274\17\7"+
    "\1\0\2\7\1\0\1\7\11\0\10\7\1\275\15\7"+
    "\1\0\2\7\1\0\1\7\11\0\26\7\1\0\1\7"+
    "\1\276\1\0\1\7\11\0\1\7\1\277\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\24\7\1\300\1\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\301\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\302\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\303\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\304\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\305\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\306\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\307\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\310\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\311\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\312\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\313\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\14\7\1\314\11\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\315\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\316\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\23\7\1\317\2\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\320\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\7\7\1\321\16\7\1\0"+
    "\2\7\1\0\1\7\11\0\21\7\1\322\4\7\1\0"+
    "\2\7\1\0\1\7\11\0\21\7\1\323\4\7\1\0"+
    "\2\7\1\0\1\7\11\0\6\7\1\324\17\7\1\0"+
    "\2\7\1\0\1\7\11\0\12\7\1\325\13\7\1\0"+
    "\2\7\1\0\1\7\11\0\1\7\1\326\24\7\1\0"+
    "\2\7\1\0\1\7\11\0\3\7\1\327\22\7\1\0"+
    "\2\7\1\0\1\7\11\0\24\7\1\330\1\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\331\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\15\7\1\332\10\7\1\0"+
    "\2\7\1\0\1\7\11\0\11\7\1\333\14\7\1\0"+
    "\2\7\1\0\1\7\11\0\10\7\1\334\15\7\1\0"+
    "\2\7\1\0\1\7\11\0\15\7\1\335\10\7\1\0"+
    "\2\7\1\0\1\7\11\0\26\7\1\0\1\7\1\336"+
    "\1\0\1\7\11\0\15\7\1\337\10\7\1\0\2\7"+
    "\1\0\1\7\11\0\20\7\1\340\5\7\1\0\2\7"+
    "\1\0\1\7\11\0\24\7\1\341\1\7\1\0\2\7"+
    "\1\0\1\7\11\0\1\7\1\342\24\7\1\0\2\7"+
    "\1\0\1\7\11\0\10\7\1\343\15\7\1\0\2\7"+
    "\1\0\1\7\11\0\6\7\1\344\17\7\1\0\2\7"+
    "\1\0\1\7\11\0\23\7\1\345\2\7\1\0\2\7"+
    "\1\0\1\7\11\0\26\7\1\0\1\346\1\7\1\0"+
    "\1\7\11\0\11\7\1\347\14\7\1\0\2\7\1\0"+
    "\1\7\11\0\3\7\1\350\22\7\1\0\2\7\1\0"+
    "\1\7\11\0\3\7\1\351\22\7\1\0\2\7\1\0"+
    "\1\7\11\0\15\7\1\352\10\7\1\0\2\7\1\0"+
    "\1\7\11\0\13\7\1\353\12\7\1\0\2\7\1\0"+
    "\1\7\11\0\11\7\1\354\14\7\1\0\2\7\1\0"+
    "\1\7\11\0\3\7\1\355\22\7\1\0\2\7\1\0"+
    "\1\7\11\0\1\7\1\356\24\7\1\0\2\7\1\0"+
    "\1\7\11\0\21\7\1\357\4\7\1\0\2\7\1\0"+
    "\1\7\11\0\10\7\1\360\15\7\1\0\2\7\1\0"+
    "\1\7\11\0\11\7\1\361\14\7\1\0\2\7\1\0"+
    "\1\7\11\0\7\7\1\362\16\7\1\0\2\7\1\0"+
    "\1\7\11\0\6\7\1\363\17\7\1\0\2\7\1\0"+
    "\1\7\11\0\26\7\1\0\2\7\1\364\1\7\11\0"+
    "\22\7\1\365\3\7\1\0\2\7\1\0\1\7\11\0"+
    "\2\7\1\366\23\7\1\0\2\7\1\0\1\7\11\0"+
    "\2\7\1\367\23\7\1\0\2\7\1\0\1\7\11\0"+
    "\3\7\1\370\22\7\1\0\2\7\1\0\1\7\11\0"+
    "\15\7\1\371\10\7\1\0\2\7\1\0\1\7\11\0"+
    "\26\7\1\0\1\7\1\372\1\0\1\7\11\0\10\7"+
    "\1\373\15\7\1\0\2\7\1\0\1\7\11\0\15\7"+
    "\1\374\10\7\1\0\2\7\1\0\1\7\11\0\6\7"+
    "\1\375\17\7\1\0\2\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\11\31\1\1\11\34\1\1\11"+
    "\240\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public Gta2MissionLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Gta2MissionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 43: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 44: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 45: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 46: break;
          case 5: 
            { return METHOD;
            } 
            // fall through
          case 47: break;
          case 6: 
            { return SUBROUTINE;
            } 
            // fall through
          case 48: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 49: break;
          case 8: 
            { return COMMENT_BLOCK;
            } 
            // fall through
          case 50: break;
          case 9: 
            { return IF;
            } 
            // fall through
          case 51: break;
          case 10: 
            { return ON;
            } 
            // fall through
          case 52: break;
          case 11: 
            { return OP_PLUS_PLUS;
            } 
            // fall through
          case 53: break;
          case 12: 
            { return END;
            } 
            // fall through
          case 54: break;
          case 13: 
            { return SET;
            } 
            // fall through
          case 55: break;
          case 14: 
            { return AND;
            } 
            // fall through
          case 56: break;
          case 15: 
            { return NOT;
            } 
            // fall through
          case 57: break;
          case 16: 
            { return OFF;
            } 
            // fall through
          case 58: break;
          case 17: 
            { return ELSE;
            } 
            // fall through
          case 59: break;
          case 18: 
            { return END_IF;
            } 
            // fall through
          case 60: break;
          case 19: 
            { return WHILE;
            } 
            // fall through
          case 61: break;
          case 20: 
            { return GOSUB;
            } 
            // fall through
          case 62: break;
          case 21: 
            { return BONUS;
            } 
            // fall through
          case 63: break;
          case 22: 
            { return RETURN;
            } 
            // fall through
          case 64: break;
          case 23: 
            { return COUNTER;
            } 
            // fall through
          case 65: break;
          case 24: 
            { return FORWARD;
            } 
            // fall through
          case 66: break;
          case 25: 
            { return LEVEL_END;
            } 
            // fall through
          case 67: break;
          case 26: 
            { return END_WHILE;
            } 
            // fall through
          case 68: break;
          case 27: 
            { return CAR_DATA;
            } 
            // fall through
          case 69: break;
          case 28: 
            { return CHAR_DATA;
            } 
            // fall through
          case 70: break;
          case 29: 
            { return LEVEL_START;
            } 
            // fall through
          case 71: break;
          case 30: 
            { return TIMER_DATA;
            } 
            // fall through
          case 72: break;
          case 31: 
            { return MISSION_END;
            } 
            // fall through
          case 73: break;
          case 32: 
            { return WHILE_EXEC;
            } 
            // fall through
          case 74: break;
          case 33: 
            { return PLAYER_PED;
            } 
            // fall through
          case 75: break;
          case 34: 
            { return MACHINE_GUN;
            } 
            // fall through
          case 76: break;
          case 35: 
            { return MISSION_START;
            } 
            // fall through
          case 77: break;
          case 36: 
            { return END_WHILE_EXEC;
            } 
            // fall through
          case 78: break;
          case 37: 
            { return THREAD_TRIGGER;
            } 
            // fall through
          case 79: break;
          case 38: 
            { return CRIMINAL_TYPE2;
            } 
            // fall through
          case 80: break;
          case 39: 
            { return REACT_AS_NORMAL;
            } 
            // fall through
          case 81: break;
          case 40: 
            { return AREA_PLAYER_ONLY;
            } 
            // fall through
          case 82: break;
          case 41: 
            { return ONSCREEN_COUNTER;
            } 
            // fall through
          case 83: break;
          case 42: 
            { return KILL_CHAR_ON_FOOT;
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
