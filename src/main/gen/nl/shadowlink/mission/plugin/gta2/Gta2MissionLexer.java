/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.shadowlink.mission.plugin.gta2;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>gta3script.flex</tt>
 */
public class Gta2MissionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\2\0\1\52\6\0\1\12\1\40\1\0\1\3\1\5\1\7\2\4\1\50\7\4"+
    "\1\11\1\0\1\42\1\41\1\43\2\0\1\21\1\37\1\33\1\24\1\15\1\34\1\36\1\31\1\26"+
    "\1\47\1\51\1\14\1\25\1\23\1\27\1\44\1\6\1\22\1\17\1\20\1\35\1\16\1\30\1\32"+
    "\1\45\1\46\4\0\1\13\1\0\3\10\1\55\1\56\1\54\2\10\1\53\4\10\1\57\14\10\12\0"+
    "\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\21\5\1\11\1\12\1\13\1\14\2\5\1\1"+
    "\1\15\2\4\1\7\1\16\1\17\1\20\22\5\1\21"+
    "\1\22\13\5\1\23\2\5\1\24\1\5\2\0\1\20"+
    "\3\5\1\25\1\5\1\26\6\5\1\27\2\5\1\30"+
    "\6\5\1\31\16\5\1\32\1\5\2\0\1\20\2\5"+
    "\1\33\4\5\1\34\35\5\2\0\1\5\1\35\2\5"+
    "\1\36\2\5\1\37\15\5\1\40\11\5\1\41\1\42"+
    "\2\5\2\0\12\5\1\43\24\5\1\44\1\45\3\5"+
    "\1\46\10\5\1\47\11\5\1\50\1\5\1\51\1\5"+
    "\1\52\3\5\1\53\2\5\1\54\10\5\1\55\3\5"+
    "\1\56\1\5\1\57\2\5\1\60\24\5\1\61\1\62"+
    "\2\5\1\63\2\5\1\64\2\5\1\65\1\5\1\66"+
    "\1\5\1\67\2\5\1\70\1\71\1\5\1\72\6\5"+
    "\1\73\11\5\1\74\4\5\1\75\6\5\1\76\1\77"+
    "\3\5\1\100\2\5\1\101\2\5\1\102\1\103\1\5"+
    "\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\60\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\60\0\60\0\60\0\u04e0\0\u0510"+
    "\0\u0540\0\60\0\u0570\0\u05a0\0\u05d0\0\60\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0990\0\360\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\60"+
    "\0\u0c00\0\u0c30\0\360\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20"+
    "\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\360\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\360\0\u0f30\0\u0f60\0\360\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\360\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\360\0\u1350\0\u1380\0\u13b0"+
    "\0\60\0\u13e0\0\u1410\0\360\0\u1440\0\u1470\0\u14a0\0\u14d0"+
    "\0\360\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\360\0\u1b00\0\u1b30\0\360\0\u1b60\0\u1b90\0\360"+
    "\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10"+
    "\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90"+
    "\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\360"+
    "\0\360\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\360"+
    "\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400"+
    "\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580"+
    "\0\u25b0\0\u25e0\0\u2610\0\u2640\0\60\0\60\0\u2670\0\u26a0"+
    "\0\u26d0\0\360\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0"+
    "\0\u2820\0\u2850\0\360\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940"+
    "\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\360\0\u2a30\0\360\0\u2a60"+
    "\0\360\0\u2a90\0\u2ac0\0\u2af0\0\360\0\u2b20\0\u2b50\0\360"+
    "\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0"+
    "\0\360\0\u2d00\0\u2d30\0\u2d60\0\360\0\u2d90\0\360\0\u2dc0"+
    "\0\u2df0\0\360\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0\0\u2f10"+
    "\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060\0\u3090"+
    "\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0\0\360\0\360"+
    "\0\u31e0\0\u3210\0\360\0\u3240\0\u3270\0\360\0\u32a0\0\u32d0"+
    "\0\360\0\u3300\0\360\0\u3330\0\360\0\u3360\0\u3390\0\360"+
    "\0\360\0\u33c0\0\360\0\u33f0\0\u3420\0\u3450\0\u3480\0\u34b0"+
    "\0\u34e0\0\360\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600"+
    "\0\u3630\0\u3660\0\u3690\0\360\0\u36c0\0\u36f0\0\u3720\0\u3750"+
    "\0\360\0\u3780\0\u37b0\0\u37e0\0\u3810\0\u3840\0\u3870\0\360"+
    "\0\360\0\u38a0\0\u38d0\0\u3900\0\u05d0\0\u3930\0\u3960\0\360"+
    "\0\u3990\0\u39c0\0\360\0\360\0\u39f0\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\6\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\6\1\27\1\30\1\6\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\3\6\1\5\1\40\1\41\5\10"+
    "\61\0\2\3\60\0\1\42\1\43\43\0\1\43\13\0"+
    "\1\5\1\44\1\45\1\0\1\10\1\46\1\0\1\10"+
    "\24\45\4\0\4\45\1\5\1\45\1\0\5\10\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\25\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\7\0\1\47\2\0"+
    "\1\50\51\0\1\10\1\0\1\45\1\0\1\10\1\46"+
    "\1\0\1\10\24\45\4\0\4\45\1\10\1\45\1\0"+
    "\5\10\4\0\1\10\1\0\1\6\1\0\1\10\1\46"+
    "\1\0\1\12\24\6\4\0\4\6\1\10\1\6\1\0"+
    "\5\10\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\2\6\1\51\10\6\1\52\11\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\1\6\1\53\6\6\1\54\6\6\1\55"+
    "\5\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\56"+
    "\3\6\1\57\5\6\1\60\10\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\13\6\1\61\2\6\1\62\6\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\7\6\1\63\1\64\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\65\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\14\6\1\66\10\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\67\11\6"+
    "\1\70\10\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\6\6"+
    "\1\71\4\6\1\72\11\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\21\6\1\73\3\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\10\6\1\74\10\6\1\75\2\6\1\76\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\16\6\1\77\6\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\100\1\101\4\6"+
    "\1\102\1\6\1\103\6\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\14\6\1\104\10\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\2\6\1\105\11\6\1\106\10\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\14\6\1\107\10\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\40\0\1\110\23\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\6\1\111\2\6"+
    "\1\112\13\6\1\113\4\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\13\6\1\114\11\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\53\0\1\115\2\0\1\116\5\0\1\43"+
    "\1\44\42\0\1\43\13\0\1\44\43\0\1\44\13\0"+
    "\1\45\1\0\1\45\1\0\1\45\2\0\25\45\4\0"+
    "\6\45\1\0\5\45\1\47\1\0\56\47\12\50\1\117"+
    "\45\50\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\3\6\1\120\21\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\23\6\1\121\1\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\4\6\1\122\20\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\11\6\1\123\13\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\2\6\1\124\22\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\5\6\1\125\17\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\3\6\1\126\21\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\22\6\1\127\2\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\12\6\1\130\12\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\7\6\1\131\15\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\2\6\1\132\4\6\1\133\15\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\11\6\1\134\13\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\5\6\1\135\1\136\16\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\5\6\1\137\17\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\4\6\1\140\20\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\1\141\24\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\20\6\1\142\4\6\4\0\1\143\3\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\4\6\1\144\20\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\4\6\1\145\20\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\21\6\1\146\3\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\25\6\4\0\3\6\1\147\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\13\6\1\150\11\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\7\6\1\151\15\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\6\6\1\152\4\6\1\153\6\6\1\154"+
    "\2\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\10\6\1\155"+
    "\11\6\1\156\2\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\6\6\1\157\16\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\7\6\1\160\15\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\10\6\1\161\14\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\4\6\1\162\20\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\10\6\1\163\14\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\6\6\1\164\16\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\17\6\1\165\5\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\1\6\1\166\23\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\54\0\1\167\62\0\1\170\7\50\1\171\2\50"+
    "\1\117\45\50\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\2\6\1\172\22\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\16\6\1\173\6\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\2\6\1\174\22\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\1\175\1\6\1\176\10\6\1\177\1\6\1\200"+
    "\7\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\20\6\1\201"+
    "\4\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\202"+
    "\22\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\10\6\1\203"+
    "\14\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\204"+
    "\22\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\205"+
    "\22\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\6\6\1\206"+
    "\16\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\14\6\1\207"+
    "\10\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\22\6\1\210"+
    "\2\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\20\6\1\211"+
    "\4\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\5\6\1\212"+
    "\17\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\10\6\1\213"+
    "\14\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\16\6\1\214"+
    "\6\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\1\215\24\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\4\6\1\216\20\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\20\6\1\217\4\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\220\24\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\6\1\221\23\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\222\24\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\10\6\1\223\14\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\12\6\1\224\12\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\4\6\1\225\20\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\3\6\1\226\21\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\10\6\1\227\14\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\7\6\1\230\15\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\15\6\1\231\7\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\2\6\1\232\22\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\22\6\1\233\2\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\22\6\1\234\2\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\25\6\4\0\1\6\1\235\2\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\1\6\1\236\23\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\55\0\1\237\57\0\1\240"+
    "\6\0\1\45\1\0\1\6\1\0\1\45\2\0\1\6"+
    "\1\241\23\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\5\6"+
    "\1\242\17\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\15\6"+
    "\1\243\7\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\17\6"+
    "\1\244\5\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\21\6"+
    "\1\245\3\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\16\6"+
    "\1\246\6\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\11\6"+
    "\1\247\13\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\11\6"+
    "\1\250\13\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\7\6"+
    "\1\251\15\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\6\6"+
    "\1\252\16\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\1\253"+
    "\24\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\15\6\1\254"+
    "\7\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\7\6\1\255"+
    "\15\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\5\6\1\256"+
    "\17\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\7\6\1\257"+
    "\15\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\14\6\1\260"+
    "\10\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\13\6\1\261"+
    "\11\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\25\6\4\0"+
    "\2\6\1\262\1\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\13\6\1\263"+
    "\11\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\7\6\1\264"+
    "\15\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\11\6\1\265"+
    "\13\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\266"+
    "\22\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\11\6\1\267"+
    "\13\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\270"+
    "\22\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\13\6\1\271"+
    "\11\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\16\6\1\272"+
    "\6\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\2\6\1\273"+
    "\22\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\5\6\1\274"+
    "\17\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\1\275\24\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\276\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\7\6\1\277\15\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\24\6\1\300\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\4\6\1\301\20\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\2\6\1\302\22\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\303\24\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\56\0\1\304\54\0\1\305"+
    "\10\0\1\45\1\0\1\6\1\0\1\45\2\0\2\6"+
    "\1\306\1\6\1\307\20\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\16\6\1\310\6\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\2\6\1\311\22\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\13\6\1\312\11\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\1\313\24\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\1\314\24\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\11\6"+
    "\1\315\13\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\25\6"+
    "\4\0\1\316\3\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\1\317\24\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\10\6\1\320\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\321\24\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\22\6\1\322\2\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\15\6\1\323\7\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\10\6\1\324\14\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\14\6\1\325\10\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\14\6\1\326\10\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\2\6\1\327\22\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\330\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\331\24\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\6\6\1\332\16\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\1\333\24\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\10\6\1\334\14\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\2\6\1\335\22\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\25\6\4\0\1\6\1\336\2\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\2\6\1\337\22\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\11\6\1\340\13\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\7\6\1\341\15\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\6\6\1\342\16\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\7\6\1\343\15\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\20\6\1\344\4\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\54\0\1\345\57\0\1\346\7\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\10\6\1\347"+
    "\14\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\5\6\1\350"+
    "\17\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\13\6\1\351"+
    "\11\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\20\6\1\352"+
    "\4\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\1\6\1\353"+
    "\23\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\20\6\1\354"+
    "\4\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\11\6\1\355"+
    "\13\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\1\356\24\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\6\1\357\23\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\11\6\1\360\13\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\361\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\20\6\1\362\4\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\5\6\1\363\17\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\364\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\10\6\1\365\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\10\6\1\366\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\367\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\5\6\1\370\17\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\371\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\5\6\1\372\17\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\11\6\1\373\13\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\374\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\7\6\1\375\15\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\14\6\1\376\10\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\7\6\1\377\15\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\u0100\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\11\6\1\u0101\13\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\5\6\1\u0102\17\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\u0103\24\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\16\6\1\u0104\6\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\11\6\1\u0105\13\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\u0106\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\6\1\u0107\23\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\2\6\1\u0108\22\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\14\6\1\u0109\10\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\u010a\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\5\6\1\u010b\17\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\u010c\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\u010d\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\4\6\1\u010e\20\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\5\6\1\u010f\17\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\u0110\24\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\2\6\1\u0111\22\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\2\6\1\u0112\1\6\1\u0113\20\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\10\6\1\u0114\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\u0115\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\17\6\1\u0116\5\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\u0117\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\6\6\1\u0118\16\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\6\1\u0119\23\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\7\6\1\u011a\15\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\5\6\1\u011b\17\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\14\6\1\u011c\10\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\25\6\4\0\1\u011d"+
    "\3\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\u011e\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\7\6\1\u011f\15\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\2\6\1\u0120\22\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\22\6\1\u0121\2\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\5\6\1\u0122\17\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\7\6\1\u0123\15\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\25\6\4\0\1\6\1\u0124"+
    "\2\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\5\6\1\u0125\17\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\1\u0126\24\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\14\6\1\u0127\10\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\23\6\1\u0128\1\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\10\6\1\u0129\14\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\5\6\1\u012a\17\6\4\0\4\6"+
    "\1\45\1\6\1\0\5\45\4\0\1\45\1\0\1\6"+
    "\1\0\1\45\2\0\1\u012b\24\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\2\6\1\u012c\22\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\5\6\1\u012d\17\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\1\u012e\24\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\6\6\1\u012f\16\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\7\6\1\u0130\15\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\2\6\1\u0131\22\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\7\6\1\u0132\15\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\5\6\1\u0133\17\6\4\0\4\6\1\45\1\6"+
    "\1\0\5\45\4\0\1\45\1\0\1\6\1\0\1\45"+
    "\2\0\1\u0134\24\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\10\6\1\u0135\14\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\6\6\1\u0136\16\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\13\6\1\u0137\11\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\2\6\1\u0138\22\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\6\6\1\u0139\16\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\10\6\1\u013a\14\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\7\6\1\u013b\15\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\22\6\1\u013c\2\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\11\6\1\u013d\13\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\6\6\1\u013e\16\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\20\6\1\u013f\4\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\20\6\1\u0140\4\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\6\6\1\u0141\16\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\5\6\1\u0142\17\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\11\6\1\u0143\13\6\4\0\4\6\1\45\1\6\1\0"+
    "\5\45\4\0\1\45\1\0\1\6\1\0\1\45\2\0"+
    "\1\u0144\24\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\2\6"+
    "\1\u0145\22\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\5\6"+
    "\1\u0146\17\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\23\6"+
    "\1\u0147\1\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\7\6"+
    "\1\u0148\15\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\14\6"+
    "\1\u0149\10\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\10\6"+
    "\1\u014a\14\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\7\6"+
    "\1\u014b\15\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\14\6"+
    "\1\u014c\10\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\25\6"+
    "\4\0\1\6\1\u014d\2\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\14\6"+
    "\1\u014e\10\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\17\6"+
    "\1\u014f\5\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\2\6"+
    "\1\u0150\22\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\23\6"+
    "\1\u0151\1\6\4\0\4\6\1\45\1\6\1\0\5\45"+
    "\4\0\1\45\1\0\1\6\1\0\1\45\2\0\1\u0152"+
    "\24\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\7\6\1\u0153"+
    "\15\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\5\6\1\u0154"+
    "\17\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\22\6\1\u0155"+
    "\2\6\4\0\4\6\1\45\1\6\1\0\5\45\4\0"+
    "\1\45\1\0\1\6\1\0\1\45\2\0\25\6\4\0"+
    "\1\u0156\3\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\10\6\1\u0157\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\u0158\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\7\6\1\u0159\15\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\u015a\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\14\6\1\u015b\10\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\12\6\1\u015c\12\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\10\6\1\u015d\14\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\2\6\1\u015e\22\6"+
    "\4\0\4\6\1\45\1\6\1\0\5\45\4\0\1\45"+
    "\1\0\1\6\1\0\1\45\2\0\1\u015f\24\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\20\6\1\u0160\4\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\7\6\1\u0161\15\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\10\6\1\u0162\14\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\6\6\1\u0163\16\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\5\6\1\u0164\17\6\4\0"+
    "\4\6\1\45\1\6\1\0\5\45\4\0\1\45\1\0"+
    "\1\6\1\0\1\45\2\0\25\6\4\0\4\6\1\u0165"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\21\6\1\u0166\3\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\1\6\1\u0167\23\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\1\6\1\u0168\23\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\2\6\1\u0169\22\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\14\6\1\u016a\10\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\25\6\4\0\1\6\1\u016b\2\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\7\6\1\u016c\15\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\14\6\1\u016d\10\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45\4\0\1\45\1\0\1\6\1\0"+
    "\1\45\2\0\5\6\1\u016e\17\6\4\0\4\6\1\45"+
    "\1\6\1\0\5\45";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\22\1\3\11\3\1\1\11"+
    "\3\1\1\11\41\1\1\11\4\1\2\0\50\1\2\0"+
    "\1\11\45\1\2\0\43\1\2\0\37\1\2\11\210\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public Gta2MissionLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Gta2MissionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 69: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 3: 
            { return OP_MINUS;
            } 
            // fall through
          case 71: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 72: break;
          case 5: 
            { return METHOD;
            } 
            // fall through
          case 73: break;
          case 6: 
            { return OP_DIVISION;
            } 
            // fall through
          case 74: break;
          case 7: 
            { return IDENTIFIER;
            } 
            // fall through
          case 75: break;
          case 8: 
            { return OP_TIMES;
            } 
            // fall through
          case 76: break;
          case 9: 
            { return OP_PLUS;
            } 
            // fall through
          case 77: break;
          case 10: 
            { return EQUALS;
            } 
            // fall through
          case 78: break;
          case 11: 
            { return OP_LESS_THAN;
            } 
            // fall through
          case 79: break;
          case 12: 
            { return OP_GREATER_THAN;
            } 
            // fall through
          case 80: break;
          case 13: 
            { return OP_MINUS_MINUS;
            } 
            // fall through
          case 81: break;
          case 14: 
            { return SUBROUTINE;
            } 
            // fall through
          case 82: break;
          case 15: 
            { return COMMENT;
            } 
            // fall through
          case 83: break;
          case 16: 
            { return COMMENT_BLOCK;
            } 
            // fall through
          case 84: break;
          case 17: 
            { return IF;
            } 
            // fall through
          case 85: break;
          case 18: 
            { return ON;
            } 
            // fall through
          case 86: break;
          case 19: 
            { return OP_PLUS_PLUS;
            } 
            // fall through
          case 87: break;
          case 20: 
            { return DEF_PC;
            } 
            // fall through
          case 88: break;
          case 21: 
            { return END;
            } 
            // fall through
          case 89: break;
          case 22: 
            { return SET;
            } 
            // fall through
          case 90: break;
          case 23: 
            { return AND;
            } 
            // fall through
          case 91: break;
          case 24: 
            { return NOT;
            } 
            // fall through
          case 92: break;
          case 25: 
            { return OFF;
            } 
            // fall through
          case 93: break;
          case 26: 
            { return DEF_PSX;
            } 
            // fall through
          case 94: break;
          case 27: 
            { return ELSE;
            } 
            // fall through
          case 95: break;
          case 28: 
            { return EXEC;
            } 
            // fall through
          case 96: break;
          case 29: 
            { return LIGHT;
            } 
            // fall through
          case 97: break;
          case 30: 
            { return END_IF;
            } 
            // fall through
          case 98: break;
          case 31: 
            { return SOUND;
            } 
            // fall through
          case 99: break;
          case 32: 
            { return WHILE;
            } 
            // fall through
          case 100: break;
          case 33: 
            { return GOSUB;
            } 
            // fall through
          case 101: break;
          case 34: 
            { return BONUS;
            } 
            // fall through
          case 102: break;
          case 35: 
            { return RETURN;
            } 
            // fall through
          case 103: break;
          case 36: 
            { return PREPROCESS_IFDEF;
            } 
            // fall through
          case 104: break;
          case 37: 
            { return PREPROCESS_ENDIF;
            } 
            // fall through
          case 105: break;
          case 38: 
            { return END_EXEC;
            } 
            // fall through
          case 106: break;
          case 39: 
            { return DO_NOWT;
            } 
            // fall through
          case 107: break;
          case 40: 
            { return CRUSHER;
            } 
            // fall through
          case 108: break;
          case 41: 
            { return COUNTER;
            } 
            // fall through
          case 109: break;
          case 42: 
            { return FORWARD;
            } 
            // fall through
          case 110: break;
          case 43: 
            { return LEVEL_END;
            } 
            // fall through
          case 111: break;
          case 44: 
            { return END_WHILE;
            } 
            // fall through
          case 112: break;
          case 45: 
            { return MAP_ZONE;
            } 
            // fall through
          case 113: break;
          case 46: 
            { return OBJ_DATA;
            } 
            // fall through
          case 114: break;
          case 47: 
            { return CAR_DATA;
            } 
            // fall through
          case 115: break;
          case 48: 
            { return CONVEYOR;
            } 
            // fall through
          case 116: break;
          case 49: 
            { return CHAR_DATA;
            } 
            // fall through
          case 117: break;
          case 50: 
            { return GENERATOR;
            } 
            // fall through
          case 118: break;
          case 51: 
            { return LEVEL_START;
            } 
            // fall through
          case 119: break;
          case 52: 
            { return TIMER_DATA;
            } 
            // fall through
          case 120: break;
          case 53: 
            { return ARROW_DATA;
            } 
            // fall through
          case 121: break;
          case 54: 
            { return DESTRUCTOR;
            } 
            // fall through
          case 122: break;
          case 55: 
            { return MISSION_END;
            } 
            // fall through
          case 123: break;
          case 56: 
            { return WHILE_EXEC;
            } 
            // fall through
          case 124: break;
          case 57: 
            { return CRANE_DATA;
            } 
            // fall through
          case 125: break;
          case 58: 
            { return PLAYER_PED;
            } 
            // fall through
          case 126: break;
          case 59: 
            { return MACHINE_GUN;
            } 
            // fall through
          case 127: break;
          case 60: 
            { return MISSION_START;
            } 
            // fall through
          case 128: break;
          case 61: 
            { return SAVED_COUNTER;
            } 
            // fall through
          case 129: break;
          case 62: 
            { return END_WHILE_EXEC;
            } 
            // fall through
          case 130: break;
          case 63: 
            { return THREAD_TRIGGER;
            } 
            // fall through
          case 131: break;
          case 64: 
            { return CRIMINAL_TYPE2;
            } 
            // fall through
          case 132: break;
          case 65: 
            { return REACT_AS_NORMAL;
            } 
            // fall through
          case 133: break;
          case 66: 
            { return AREA_PLAYER_ONLY;
            } 
            // fall through
          case 134: break;
          case 67: 
            { return ONSCREEN_COUNTER;
            } 
            // fall through
          case 135: break;
          case 68: 
            { return KILL_CHAR_ON_FOOT;
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
