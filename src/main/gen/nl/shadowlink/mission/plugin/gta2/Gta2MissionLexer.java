/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.shadowlink.mission.plugin.gta2;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.shadowlink.mission.plugin.gta2.psi.Gta2MissionTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>gta2_mis.flex</tt>
 */
public class Gta2MissionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\12\0\1\33\2\0\1\4\1\6\2\3\1\40\7\3\1\7\6\0\1\17\1\10"+
    "\1\27\1\22\1\13\1\30\1\37\1\24\1\25\1\10\1\41\1\12\1\36\1\21\1\32\1\34\1\10"+
    "\1\20\1\15\1\16\1\31\1\14\1\23\1\26\1\35\1\10\4\0\1\11\1\0\32\5\12\0\1\1\32"+
    "\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\4"+
    "\13\5\1\1\3\5\1\3\1\4\1\6\1\7\12\5"+
    "\1\10\5\5\1\11\4\5\1\12\1\13\3\5\1\14"+
    "\2\5\1\15\34\5\1\16\5\5\1\17\16\5\1\20"+
    "\25\5\1\21\1\22\3\5\1\23\1\5\1\24\5\5"+
    "\1\25\14\5\1\26\3\5\1\27\1\5\1\30\2\5"+
    "\1\31\1\5\1\32\6\5\1\33\13\5\1\34\2\5"+
    "\1\35\2\5\1\36\1\5\1\37\1\5\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\42\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\314\0\u04c8\0\u04ea"+
    "\0\u050c\0\u052e\0\u0550\0\42\0\u0572\0\u0594\0\u05b6\0\u05d8"+
    "\0\u05fa\0\314\0\u061c\0\u063e\0\u0660\0\314\0\u0682\0\u06a4"+
    "\0\314\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792"+
    "\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2"+
    "\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2"+
    "\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\314\0\u0a7e\0\u0aa0"+
    "\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0"+
    "\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0"+
    "\0\u0ce2\0\u0d04\0\314\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae"+
    "\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe"+
    "\0\u0ee0\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce"+
    "\0\314\0\314\0\u0ff0\0\u1012\0\u1034\0\314\0\u1056\0\314"+
    "\0\u1078\0\u109a\0\u10bc\0\u10de\0\u1100\0\314\0\u1122\0\u1144"+
    "\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232\0\u1254"+
    "\0\u1276\0\u1298\0\314\0\u12ba\0\u12dc\0\u12fe\0\314\0\u1320"+
    "\0\314\0\u1342\0\u1364\0\314\0\u1386\0\314\0\u13a8\0\u13ca"+
    "\0\u13ec\0\u140e\0\u1430\0\u1452\0\314\0\u1474\0\u1496\0\u14b8"+
    "\0\u14da\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6\0\u15c8"+
    "\0\314\0\u15ea\0\u160c\0\42\0\u162e\0\u1650\0\314\0\u1672"+
    "\0\314\0\u1694\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\15\1\16"+
    "\1\17\1\7\1\20\1\7\1\21\1\7\1\22\1\23"+
    "\2\7\1\24\1\25\1\7\1\26\1\7\1\4\1\27"+
    "\43\0\2\3\42\0\1\4\1\30\1\31\3\0\1\31"+
    "\26\0\1\4\4\0\1\31\1\0\1\5\1\0\1\32"+
    "\1\0\1\5\26\0\1\31\7\0\1\33\43\0\23\7"+
    "\1\0\4\7\1\0\1\7\3\0\1\31\1\0\1\5"+
    "\1\0\1\32\1\7\1\10\21\7\1\0\4\7\1\31"+
    "\1\7\10\0\3\7\1\34\17\7\1\0\4\7\1\0"+
    "\1\7\10\0\11\7\1\35\11\7\1\0\4\7\1\0"+
    "\1\7\10\0\3\7\1\36\17\7\1\0\4\7\1\0"+
    "\1\7\10\0\14\7\1\37\1\40\5\7\1\0\4\7"+
    "\1\0\1\7\10\0\10\7\1\41\1\42\11\7\1\0"+
    "\4\7\1\0\1\7\10\0\3\7\1\43\17\7\1\0"+
    "\4\7\1\0\1\7\10\0\22\7\1\44\1\0\4\7"+
    "\1\0\1\7\10\0\14\7\1\45\6\7\1\0\4\7"+
    "\1\0\1\7\10\0\20\7\1\46\2\7\1\0\4\7"+
    "\1\0\1\7\10\0\7\7\1\47\1\50\3\7\1\51"+
    "\5\7\1\52\1\0\4\7\1\0\1\7\10\0\22\7"+
    "\1\53\1\0\4\7\1\0\1\7\33\0\1\54\16\0"+
    "\2\7\1\55\20\7\1\0\4\7\1\0\1\7\10\0"+
    "\7\7\1\56\13\7\1\0\4\7\1\0\1\7\10\0"+
    "\15\7\1\57\5\7\1\0\4\7\1\0\1\7\3\0"+
    "\1\30\34\0\1\30\4\0\1\31\1\0\1\31\3\0"+
    "\1\31\26\0\1\31\1\0\1\33\1\0\40\33\10\0"+
    "\4\7\1\60\16\7\1\0\4\7\1\0\1\7\10\0"+
    "\12\7\1\61\10\7\1\0\4\7\1\0\1\7\10\0"+
    "\6\7\1\62\14\7\1\0\4\7\1\0\1\7\10\0"+
    "\10\7\1\63\12\7\1\0\4\7\1\0\1\7\10\0"+
    "\23\7\1\0\2\7\1\64\1\7\1\0\1\7\10\0"+
    "\3\7\1\65\17\7\1\0\4\7\1\0\1\7\10\0"+
    "\12\7\1\66\10\7\1\0\4\7\1\0\1\7\10\0"+
    "\6\7\1\67\1\70\13\7\1\0\4\7\1\0\1\7"+
    "\10\0\6\7\1\71\14\7\1\0\4\7\1\0\1\7"+
    "\10\0\15\7\1\72\5\7\1\0\4\7\1\0\1\7"+
    "\10\0\10\7\1\73\12\7\1\0\4\7\1\0\1\7"+
    "\10\0\15\7\1\74\5\7\1\0\4\7\1\0\1\7"+
    "\10\0\7\7\1\75\13\7\1\0\4\7\1\0\1\7"+
    "\10\0\21\7\1\76\1\7\1\0\4\7\1\0\1\7"+
    "\10\0\10\7\1\77\12\7\1\0\4\7\1\0\1\7"+
    "\10\0\7\7\1\100\13\7\1\0\4\7\1\0\1\7"+
    "\10\0\17\7\1\101\3\7\1\0\4\7\1\0\1\7"+
    "\10\0\2\7\1\102\20\7\1\0\4\7\1\0\1\7"+
    "\10\0\3\7\1\103\17\7\1\0\4\7\1\0\1\7"+
    "\10\0\13\7\1\104\1\7\1\105\5\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\106\17\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\107\17\7\1\0\4\7"+
    "\1\0\1\7\10\0\7\7\1\110\13\7\1\0\4\7"+
    "\1\0\1\7\10\0\21\7\1\111\1\7\1\0\4\7"+
    "\1\0\1\7\10\0\17\7\1\112\3\7\1\0\4\7"+
    "\1\0\1\7\10\0\2\7\1\113\20\7\1\0\4\7"+
    "\1\0\1\7\10\0\1\7\1\114\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\23\7\1\0\2\7\1\115\1\7"+
    "\1\0\1\7\10\0\10\7\1\116\12\7\1\0\4\7"+
    "\1\0\1\7\10\0\11\7\1\117\11\7\1\0\4\7"+
    "\1\0\1\7\10\0\13\7\1\120\7\7\1\0\4\7"+
    "\1\0\1\7\10\0\23\7\1\0\1\7\1\121\2\7"+
    "\1\0\1\7\10\0\14\7\1\122\6\7\1\0\4\7"+
    "\1\0\1\7\10\0\2\7\1\123\20\7\1\0\4\7"+
    "\1\0\1\7\10\0\2\7\1\124\20\7\1\0\4\7"+
    "\1\0\1\7\10\0\14\7\1\125\6\7\1\0\4\7"+
    "\1\0\1\7\10\0\20\7\1\126\2\7\1\0\4\7"+
    "\1\0\1\7\10\0\7\7\1\127\13\7\1\0\4\7"+
    "\1\0\1\7\10\0\10\7\1\130\12\7\1\0\4\7"+
    "\1\0\1\7\10\0\1\7\1\131\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\10\7\1\132\12\7\1\0\4\7"+
    "\1\0\1\7\10\0\6\7\1\133\14\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\134\17\7\1\0\4\7"+
    "\1\0\1\7\10\0\12\7\1\135\10\7\1\0\4\7"+
    "\1\0\1\7\10\0\15\7\1\136\5\7\1\0\4\7"+
    "\1\0\1\7\10\0\1\7\1\137\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\6\7\1\140\14\7\1\0\4\7"+
    "\1\0\1\7\10\0\7\7\1\141\13\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\142\17\7\1\0\4\7"+
    "\1\0\1\7\10\0\15\7\1\143\5\7\1\0\4\7"+
    "\1\0\1\7\10\0\1\7\1\144\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\145\1\7\1\146\15\7"+
    "\1\0\4\7\1\0\1\7\10\0\15\7\1\147\5\7"+
    "\1\0\4\7\1\0\1\7\10\0\12\7\1\150\10\7"+
    "\1\0\4\7\1\0\1\7\10\0\1\7\1\151\21\7"+
    "\1\0\4\7\1\0\1\7\10\0\23\7\1\0\1\152"+
    "\3\7\1\0\1\7\10\0\11\7\1\153\11\7\1\0"+
    "\4\7\1\0\1\7\10\0\1\7\1\154\21\7\1\0"+
    "\4\7\1\0\1\7\10\0\1\7\1\155\21\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\156\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\11\7\1\157\11\7\1\0"+
    "\4\7\1\0\1\7\10\0\12\7\1\160\10\7\1\0"+
    "\4\7\1\0\1\7\10\0\3\7\1\161\17\7\1\0"+
    "\4\7\1\0\1\7\10\0\10\7\1\162\12\7\1\0"+
    "\4\7\1\0\1\7\10\0\10\7\1\163\12\7\1\0"+
    "\4\7\1\0\1\7\10\0\11\7\1\164\11\7\1\0"+
    "\4\7\1\0\1\7\10\0\17\7\1\165\3\7\1\0"+
    "\4\7\1\0\1\7\10\0\11\7\1\166\11\7\1\0"+
    "\4\7\1\0\1\7\10\0\6\7\1\167\14\7\1\0"+
    "\4\7\1\0\1\7\10\0\2\7\1\170\20\7\1\0"+
    "\4\7\1\0\1\7\10\0\1\7\1\171\21\7\1\0"+
    "\4\7\1\0\1\7\10\0\12\7\1\172\10\7\1\0"+
    "\4\7\1\0\1\7\10\0\2\7\1\173\20\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\174\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\3\7\1\175\17\7\1\0"+
    "\4\7\1\0\1\7\10\0\6\7\1\176\14\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\177\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\200\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\10\7\1\201\12\7\1\0"+
    "\4\7\1\0\1\7\10\0\12\7\1\202\10\7\1\0"+
    "\4\7\1\0\1\7\10\0\1\7\1\203\21\7\1\0"+
    "\4\7\1\0\1\7\10\0\3\7\1\204\17\7\1\0"+
    "\4\7\1\0\1\7\10\0\14\7\1\205\6\7\1\0"+
    "\4\7\1\0\1\7\10\0\12\7\1\206\10\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\207\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\3\7\1\210\17\7\1\0"+
    "\4\7\1\0\1\7\10\0\6\7\1\211\14\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\212\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\213\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\5\7\1\214\15\7\1\0"+
    "\4\7\1\0\1\7\10\0\16\7\1\215\4\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\216\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\2\7\1\217\20\7\1\0"+
    "\4\7\1\0\1\7\10\0\6\7\1\220\14\7\1\0"+
    "\4\7\1\0\1\7\10\0\23\7\1\0\1\221\3\7"+
    "\1\0\1\7\10\0\1\7\1\222\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\7\7\1\223\13\7\1\0\4\7"+
    "\1\0\1\7\10\0\10\7\1\224\12\7\1\0\4\7"+
    "\1\0\1\7\10\0\10\7\1\225\12\7\1\0\4\7"+
    "\1\0\1\7\10\0\6\7\1\226\14\7\1\0\4\7"+
    "\1\0\1\7\10\0\23\7\1\0\1\7\1\227\2\7"+
    "\1\0\1\7\10\0\1\7\1\230\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\231\17\7\1\0\4\7"+
    "\1\0\1\7\10\0\1\7\1\232\21\7\1\0\4\7"+
    "\1\0\1\7\10\0\7\7\1\233\13\7\1\0\4\7"+
    "\1\0\1\7\10\0\3\7\1\234\17\7\1\0\4\7"+
    "\1\0\1\7\10\0\23\7\1\0\3\7\1\235\1\0"+
    "\1\7\10\0\10\7\1\236\12\7\1\0\4\7\1\0"+
    "\1\7\10\0\6\7\1\237\14\7\1\0\4\7\1\0"+
    "\1\7\10\0\15\7\1\240\5\7\1\0\4\7\1\0"+
    "\1\7\10\0\7\7\1\241\13\7\1\0\4\7\1\0"+
    "\1\7\10\0\3\7\1\242\17\7\1\0\4\7\1\0"+
    "\1\7\10\0\11\7\1\243\11\7\1\0\4\7\1\0"+
    "\1\7\10\0\17\7\1\244\3\7\1\0\4\7\1\0"+
    "\1\7\10\0\6\7\1\245\14\7\1\0\4\7\1\0"+
    "\1\7\10\0\12\7\1\246\10\7\1\0\4\7\1\0"+
    "\1\7\10\0\21\7\1\247\1\7\1\0\4\7\1\0"+
    "\1\7\10\0\1\7\1\250\21\7\1\0\4\7\1\0"+
    "\1\7\10\0\23\7\1\0\3\7\1\251\1\0\1\7"+
    "\10\0\10\7\1\252\12\7\1\0\4\7\1\0\1\7"+
    "\10\0\22\7\1\253\1\0\4\7\1\0\1\7\10\0"+
    "\23\7\1\0\1\7\1\254\2\7\1\0\1\7\10\0"+
    "\11\7\1\255\11\7\1\0\4\7\1\0\1\7\10\0"+
    "\22\7\1\256\1\0\4\7\1\0\1\7\10\0\23\7"+
    "\1\0\3\7\1\257\1\0\1\7\10\0\1\7\1\260"+
    "\21\7\1\0\4\7\1\0\1\7\10\0\10\7\1\261"+
    "\12\7\1\0\4\7\1\0\1\7\10\0\23\7\1\0"+
    "\1\262\3\7\1\0\1\7\10\0\11\7\1\263\11\7"+
    "\1\0\4\7\1\0\1\7\10\0\3\7\1\264\17\7"+
    "\1\0\4\7\1\0\1\7\10\0\22\7\1\265\1\0"+
    "\4\7\1\0\1\7\10\0\23\7\1\0\2\7\1\266"+
    "\1\7\1\0\1\7\10\0\3\7\1\267\17\7\1\0"+
    "\4\7\1\0\1\7\10\0\1\7\1\270\21\7\1\0"+
    "\4\7\1\0\1\7\10\0\10\7\1\271\12\7\1\0"+
    "\4\7\1\0\1\7\10\0\11\7\1\272\11\7\1\0"+
    "\4\7\1\0\1\7\10\0\7\7\1\273\13\7\1\0"+
    "\4\7\1\0\1\7\10\0\23\7\1\0\4\7\1\274"+
    "\1\7\10\0\20\7\1\275\2\7\1\0\4\7\1\0"+
    "\1\7\10\0\2\7\1\276\20\7\1\0\4\7\1\0"+
    "\1\7\10\0\2\7\1\277\20\7\1\0\4\7\1\0"+
    "\1\7\10\0\22\7\1\300\1\0\4\7\1\0\1\7"+
    "\10\0\23\7\1\0\1\7\1\301\2\7\1\0\1\7"+
    "\10\0\22\7\1\302\1\0\4\7\1\0\1\7\10\0"+
    "\6\7\1\303\14\7\1\0\4\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5814];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\21\1\1\11\217\1\1\11"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public Gta2MissionLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Gta2MissionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 33: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 34: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 35: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 36: break;
          case 5: 
            { return METHOD;
            } 
            // fall through
          case 37: break;
          case 6: 
            { return SUBROUTINE;
            } 
            // fall through
          case 38: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 39: break;
          case 8: 
            { return IF;
            } 
            // fall through
          case 40: break;
          case 9: 
            { return OP_PLUS_PLUS;
            } 
            // fall through
          case 41: break;
          case 10: 
            { return END;
            } 
            // fall through
          case 42: break;
          case 11: 
            { return SET;
            } 
            // fall through
          case 43: break;
          case 12: 
            { return AND;
            } 
            // fall through
          case 44: break;
          case 13: 
            { return NOT;
            } 
            // fall through
          case 45: break;
          case 14: 
            { return END_IF;
            } 
            // fall through
          case 46: break;
          case 15: 
            { return WHILE;
            } 
            // fall through
          case 47: break;
          case 16: 
            { return RETURN;
            } 
            // fall through
          case 48: break;
          case 17: 
            { return COUNTER;
            } 
            // fall through
          case 49: break;
          case 18: 
            { return FORWARD;
            } 
            // fall through
          case 50: break;
          case 19: 
            { return LEVEL_END;
            } 
            // fall through
          case 51: break;
          case 20: 
            { return END_WHILE;
            } 
            // fall through
          case 52: break;
          case 21: 
            { return CAR_DATA;
            } 
            // fall through
          case 53: break;
          case 22: 
            { return CHAR_DATA;
            } 
            // fall through
          case 54: break;
          case 23: 
            { return LEVEL_START;
            } 
            // fall through
          case 55: break;
          case 24: 
            { return TIMER_DATA;
            } 
            // fall through
          case 56: break;
          case 25: 
            { return WHILE_EXEC;
            } 
            // fall through
          case 57: break;
          case 26: 
            { return PLAYER_PED;
            } 
            // fall through
          case 58: break;
          case 27: 
            { return MACHINE_GUN;
            } 
            // fall through
          case 59: break;
          case 28: 
            { return THREAD_TRIGGER;
            } 
            // fall through
          case 60: break;
          case 29: 
            { return CRIMINAL_TYPE2;
            } 
            // fall through
          case 61: break;
          case 30: 
            { return REACT_AS_NORMAL;
            } 
            // fall through
          case 62: break;
          case 31: 
            { return AREA_PLAYER_ONLY;
            } 
            // fall through
          case 63: break;
          case 32: 
            { return KILL_CHAR_ON_FOOT;
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
