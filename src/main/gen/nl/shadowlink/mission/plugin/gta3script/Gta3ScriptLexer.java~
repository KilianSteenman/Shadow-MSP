// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: gta3script.flex

package nl.shadowlink.mission.plugin.gta3script;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.shadowlink.mission.plugin.gta3script.psi.Gta2MissionTypes.*;


public class Gta3ScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\2\0\1\3\6\0"+
    "\1\4\1\5\1\0\1\6\1\7\1\10\2\11\1\12"+
    "\7\11\1\13\1\0\1\14\1\15\1\16\2\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\4\0\1\51\1\0\3\52\1\53\1\54\1\55"+
    "\2\52\1\56\4\52\1\57\14\52\12\0\1\2\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\2\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0\u0100\60";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\24\13\1\14\2\0\1\15"+
    "\1\16\1\7\1\17\1\20\1\7\1\21\1\14\17\13"+
    "\1\22\10\13\1\23\1\24\11\13\2\0\1\17\1\25"+
    "\15\13\1\26\12\13\1\27\1\13\1\30\2\13\1\31"+
    "\3\13\1\32\4\13\2\0\1\17\14\13\1\33\4\13"+
    "\1\34\23\13\2\0\2\13\1\35\12\13\1\36\4\13"+
    "\1\37\2\13\1\40\11\13\1\41\2\13\1\42\1\43"+
    "\1\44\32\13\1\45\11\13\1\46\2\13\1\47\1\13"+
    "\1\50\1\51\2\13\1\52\21\13\1\53\1\13\1\54"+
    "\3\13\1\55\3\13\1\56\2\13\1\57\2\13\1\60"+
    "\11\13\1\61\4\13\1\62\15\13\1\63\1\64\1\13"+
    "\1\65\2\13\1\66\1\13\1\67\2\13\1\70\3\13"+
    "\1\71\1\72\4\13\1\73\11\13\1\74\12\13\1\75"+
    "\2\13\1\76\1\77\3\13\1\100\3\13\1\101\1\102"+
    "\1\13\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\61\0\304\0\365\0\u0126"+
    "\0\u0157\0\61\0\61\0\61\0\u0188\0\u01b9\0\u01ea\0\u021b"+
    "\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\61\0\61\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\61\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u02df\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u02df\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u02df\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045"+
    "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u02df\0\u1260\0\u02df\0\u1291\0\u12c2\0\u02df"+
    "\0\u12f3\0\u1324\0\u1355\0\u02df\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\61\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u02df"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u02df\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u02df\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u02df"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u02df\0\u1ed1\0\u1f02\0\u02df"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u02df\0\u20ec\0\u211d\0\u214e\0\61\0\61\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f"+
    "\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617"+
    "\0\u2648\0\u02df\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u02df\0\u2832\0\u2863\0\u02df\0\u2894"+
    "\0\u02df\0\u02df\0\u28c5\0\u28f6\0\u02df\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u02df\0\u2c68"+
    "\0\u02df\0\u2c99\0\u2cca\0\u2cfb\0\u02df\0\u2d2c\0\u2d5d\0\u2d8e"+
    "\0\u02df\0\u2dbf\0\u2df0\0\u02df\0\u2e21\0\u2e52\0\u02df\0\u2e83"+
    "\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u02df\0\u303c\0\u306d\0\u309e\0\u30cf\0\u02df\0\u3100\0\u3131"+
    "\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9"+
    "\0\u32ea\0\u331b\0\u334c\0\u02df\0\u02df\0\u337d\0\u02df\0\u33ae"+
    "\0\u33df\0\u02df\0\u3410\0\u02df\0\u3441\0\u3472\0\u02df\0\u34a3"+
    "\0\u34d4\0\u3505\0\u02df\0\u02df\0\u3536\0\u3567\0\u3598\0\u35c9"+
    "\0\u02df\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720"+
    "\0\u3751\0\u3782\0\u02df\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877"+
    "\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u02df\0\u399d\0\u39ce"+
    "\0\u06b3\0\u02df\0\u39ff\0\u3a30\0\u3a61\0\u02df\0\u3a92\0\u3ac3"+
    "\0\u3af4\0\u02df\0\u02df\0\u3b25\0\u02df\0\u02df";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\2\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\24\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\24\1\34\1\35"+
    "\1\36\2\24\1\37\3\24\1\40\6\41\1\2\62\0"+
    "\2\3\132\0\1\42\1\0\1\43\7\0\1\44\61\0"+
    "\1\45\2\0\2\46\52\0\1\47\3\0\1\50\57\0"+
    "\1\51\1\0\2\11\1\52\3\0\32\53\7\41\12\0"+
    "\2\53\4\0\15\24\1\54\3\24\1\55\11\24\6\53"+
    "\12\0\2\53\4\0\16\24\1\56\14\24\6\53\12\0"+
    "\2\53\4\0\1\57\6\24\1\60\6\24\1\61\2\24"+
    "\1\62\11\24\6\53\12\0\2\53\4\0\4\24\1\63"+
    "\11\24\1\64\14\24\6\53\12\0\2\53\4\0\13\24"+
    "\1\65\1\24\1\66\11\24\1\67\3\24\6\53\12\0"+
    "\2\53\4\0\16\24\1\70\14\24\6\53\12\0\2\53"+
    "\4\0\4\24\1\71\11\24\1\72\14\24\6\53\12\0"+
    "\2\53\4\0\33\24\6\53\12\0\2\53\4\0\5\24"+
    "\1\73\25\24\6\53\12\0\2\53\4\0\10\24\1\74"+
    "\22\24\6\53\12\0\2\53\4\0\4\24\1\75\3\24"+
    "\1\76\22\24\6\53\12\0\2\53\4\0\1\77\7\24"+
    "\1\100\22\24\6\53\12\0\2\53\4\0\16\24\1\101"+
    "\14\24\6\53\12\0\2\53\4\0\1\24\1\102\3\24"+
    "\1\103\7\24\1\104\15\24\6\53\12\0\2\53\4\0"+
    "\2\24\1\105\10\24\1\106\6\24\1\107\10\24\6\53"+
    "\12\0\2\53\4\0\4\24\1\110\26\24\6\53\12\0"+
    "\2\53\4\0\1\111\3\24\1\112\11\24\1\113\14\24"+
    "\6\53\12\0\2\53\4\0\7\24\1\114\1\115\22\24"+
    "\6\53\12\0\2\53\4\0\7\24\1\116\23\24\6\53"+
    "\12\0\2\41\1\52\3\0\32\24\1\40\6\41\12\0"+
    "\2\41\1\52\3\0\32\53\7\41\60\0\1\117\56\0"+
    "\1\120\12\0\1\51\1\0\2\46\46\0\4\47\1\121"+
    "\54\47\2\50\1\0\55\50\12\0\2\51\57\0\2\53"+
    "\4\0\41\53\12\0\2\53\4\0\3\24\1\122\27\24"+
    "\6\53\12\0\2\53\4\0\4\24\1\123\14\24\1\124"+
    "\11\24\6\53\12\0\2\53\4\0\15\24\1\125\15\24"+
    "\6\53\12\0\2\53\4\0\21\24\1\126\11\24\6\53"+
    "\12\0\2\53\4\0\1\127\32\24\6\53\12\0\2\53"+
    "\4\0\15\24\1\130\6\24\1\131\6\24\6\53\12\0"+
    "\2\53\4\0\1\132\7\24\1\133\13\24\1\134\6\24"+
    "\6\53\12\0\2\53\4\0\22\24\1\135\10\24\6\53"+
    "\12\0\2\53\4\0\32\24\1\136\6\53\12\0\2\53"+
    "\4\0\22\24\1\137\10\24\6\53\12\0\2\53\4\0"+
    "\3\24\1\140\27\24\6\53\12\0\2\53\4\0\4\24"+
    "\1\141\26\24\6\53\12\0\2\53\4\0\21\24\1\142"+
    "\11\24\6\53\12\0\2\53\4\0\15\24\1\143\15\24"+
    "\6\53\12\0\2\53\4\0\22\24\1\144\10\24\6\53"+
    "\12\0\2\53\4\0\13\24\1\145\17\24\6\53\12\0"+
    "\2\53\4\0\25\24\1\146\5\24\6\53\12\0\2\53"+
    "\4\0\6\24\1\147\24\24\6\53\12\0\2\53\4\0"+
    "\2\24\1\150\14\24\1\151\13\24\6\53\12\0\2\53"+
    "\4\0\22\24\1\152\10\24\6\53\12\0\2\53\4\0"+
    "\23\24\1\153\7\24\6\53\12\0\2\53\4\0\11\24"+
    "\1\154\21\24\6\53\12\0\2\53\4\0\5\24\1\155"+
    "\25\24\6\53\12\0\2\53\4\0\22\24\1\156\10\24"+
    "\6\53\12\0\2\53\4\0\1\157\32\24\6\53\12\0"+
    "\2\53\4\0\27\24\1\160\3\24\6\53\12\0\2\53"+
    "\4\0\1\161\22\24\1\162\7\24\6\53\12\0\2\53"+
    "\4\0\25\24\1\163\5\24\6\53\12\0\2\53\4\0"+
    "\23\24\1\164\7\24\6\53\12\0\2\53\4\0\24\24"+
    "\1\165\6\24\6\53\12\0\2\53\4\0\21\24\1\166"+
    "\11\24\6\53\12\0\2\53\4\0\14\24\1\167\16\24"+
    "\6\53\12\0\2\53\4\0\10\24\1\170\22\24\6\53"+
    "\54\0\1\171\60\0\1\172\5\0\4\47\1\121\3\47"+
    "\1\173\50\47\11\0\2\53\4\0\1\174\32\24\6\53"+
    "\12\0\2\53\4\0\16\24\1\175\14\24\6\53\12\0"+
    "\2\53\4\0\24\24\1\176\6\24\6\53\12\0\2\53"+
    "\4\0\32\24\1\177\6\53\12\0\2\53\4\0\21\24"+
    "\1\200\11\24\6\53\12\0\2\53\4\0\25\24\1\201"+
    "\5\24\6\53\12\0\2\53\4\0\15\24\1\202\15\24"+
    "\6\53\12\0\2\53\4\0\15\24\1\203\15\24\6\53"+
    "\12\0\2\53\4\0\14\24\1\204\16\24\6\53\12\0"+
    "\2\53\4\0\22\24\1\205\10\24\6\53\12\0\2\53"+
    "\4\0\23\24\1\206\7\24\6\53\12\0\2\53\4\0"+
    "\15\24\1\207\15\24\6\53\12\0\2\53\4\0\4\24"+
    "\1\210\26\24\6\53\12\0\2\53\4\0\4\24\1\211"+
    "\3\24\1\212\15\24\1\213\3\24\1\214\6\53\12\0"+
    "\2\53\4\0\2\24\1\215\30\24\6\53\12\0\2\53"+
    "\4\0\26\24\1\216\4\24\6\53\12\0\2\53\4\0"+
    "\4\24\1\217\26\24\6\53\12\0\2\53\4\0\24\24"+
    "\1\220\6\24\6\53\12\0\2\53\4\0\13\24\1\221"+
    "\17\24\6\53\12\0\2\53\4\0\4\24\1\222\26\24"+
    "\6\53\12\0\2\53\4\0\7\24\1\223\23\24\6\53"+
    "\12\0\2\53\4\0\7\24\1\224\23\24\6\53\12\0"+
    "\2\53\4\0\32\24\1\225\6\53\12\0\2\53\4\0"+
    "\22\24\1\226\10\24\6\53\12\0\2\53\4\0\32\24"+
    "\1\227\6\53\12\0\2\53\4\0\2\24\1\230\30\24"+
    "\6\53\12\0\2\53\4\0\30\24\1\231\2\24\6\53"+
    "\12\0\2\53\4\0\2\24\1\232\30\24\6\53\12\0"+
    "\2\53\4\0\24\24\1\233\6\24\6\53\12\0\2\53"+
    "\4\0\4\24\1\234\26\24\6\53\12\0\2\53\4\0"+
    "\15\24\1\235\15\24\6\53\12\0\2\53\4\0\4\24"+
    "\1\236\26\24\6\53\12\0\2\53\4\0\4\24\1\237"+
    "\26\24\6\53\12\0\2\53\4\0\13\24\1\240\17\24"+
    "\6\53\57\0\1\241\56\0\1\242\15\0\2\53\4\0"+
    "\32\24\1\243\6\53\12\0\2\53\4\0\26\24\1\244"+
    "\4\24\6\53\12\0\2\53\4\0\22\24\1\245\10\24"+
    "\6\53\12\0\2\53\4\0\3\24\1\246\27\24\6\53"+
    "\12\0\2\53\4\0\32\24\1\247\6\53\12\0\2\53"+
    "\4\0\4\24\1\250\26\24\6\53\12\0\2\53\4\0"+
    "\23\24\1\251\7\24\6\53\12\0\2\53\4\0\4\24"+
    "\1\252\26\24\6\53\12\0\2\53\4\0\10\24\1\253"+
    "\22\24\6\53\12\0\2\53\4\0\7\24\1\254\23\24"+
    "\6\53\12\0\2\53\4\0\21\24\1\255\11\24\6\53"+
    "\12\0\2\53\4\0\16\24\1\256\14\24\6\53\12\0"+
    "\2\53\4\0\27\24\1\257\3\24\6\53\12\0\2\53"+
    "\4\0\5\24\1\260\25\24\6\53\12\0\2\53\4\0"+
    "\7\24\1\261\23\24\6\53\12\0\2\53\4\0\26\24"+
    "\1\262\4\24\6\53\12\0\2\53\4\0\1\263\32\24"+
    "\6\53\12\0\2\53\4\0\21\24\1\264\11\24\6\53"+
    "\12\0\2\53\4\0\1\24\1\265\31\24\6\53\12\0"+
    "\2\53\4\0\32\24\1\266\6\53\12\0\2\53\4\0"+
    "\13\24\1\267\17\24\6\53\12\0\2\53\4\0\23\24"+
    "\1\270\7\24\6\53\12\0\2\53\4\0\10\24\1\271"+
    "\22\24\6\53\12\0\2\53\4\0\31\24\1\272\1\24"+
    "\6\53\12\0\2\53\4\0\10\24\1\273\22\24\6\53"+
    "\12\0\2\53\4\0\3\24\1\274\27\24\6\53\12\0"+
    "\2\53\4\0\21\24\1\275\11\24\6\53\12\0\2\53"+
    "\4\0\4\24\1\276\26\24\6\53\12\0\2\53\4\0"+
    "\23\24\1\277\7\24\6\53\12\0\2\53\4\0\21\24"+
    "\1\300\11\24\6\53\12\0\2\53\4\0\3\24\1\301"+
    "\27\24\6\53\12\0\2\53\4\0\3\24\1\302\27\24"+
    "\6\53\12\0\2\53\4\0\1\303\32\24\6\53\12\0"+
    "\2\53\4\0\21\24\1\304\11\24\6\53\12\0\2\53"+
    "\4\0\4\24\1\305\26\24\6\53\56\0\1\306\60\0"+
    "\1\307\14\0\2\53\4\0\17\24\1\310\13\24\6\53"+
    "\12\0\2\53\4\0\32\24\1\311\6\53\12\0\2\53"+
    "\4\0\1\312\32\24\6\53\12\0\2\53\4\0\3\24"+
    "\1\313\27\24\6\53\12\0\2\53\4\0\30\24\1\314"+
    "\2\24\6\53\12\0\2\53\4\0\4\24\1\315\26\24"+
    "\6\53\12\0\2\53\4\0\32\24\1\316\6\53\12\0"+
    "\2\53\4\0\15\24\1\317\15\24\6\53\12\0\2\53"+
    "\4\0\4\24\1\320\26\24\6\53\12\0\2\53\4\0"+
    "\24\24\1\321\6\24\6\53\12\0\2\53\4\0\26\24"+
    "\1\322\4\24\6\53\12\0\2\53\4\0\4\24\1\323"+
    "\26\24\6\53\12\0\2\53\4\0\10\24\1\324\22\24"+
    "\6\53\12\0\2\53\4\0\7\24\1\325\23\24\6\53"+
    "\12\0\2\53\4\0\21\24\1\326\11\24\6\53\12\0"+
    "\2\53\4\0\1\327\32\24\6\53\12\0\2\53\4\0"+
    "\2\24\1\330\30\24\6\53\12\0\2\53\4\0\4\24"+
    "\1\331\15\24\1\332\10\24\6\53\12\0\2\53\4\0"+
    "\15\24\1\333\15\24\6\53\12\0\2\53\4\0\16\24"+
    "\1\334\14\24\6\53\12\0\2\53\4\0\16\24\1\335"+
    "\14\24\6\53\12\0\2\53\4\0\1\336\32\24\6\53"+
    "\12\0\2\53\4\0\4\24\1\337\26\24\6\53\12\0"+
    "\2\53\4\0\21\24\1\340\11\24\6\53\12\0\2\53"+
    "\4\0\32\24\1\341\6\53\12\0\2\53\4\0\15\24"+
    "\1\342\15\24\6\53\12\0\2\53\4\0\32\24\1\343"+
    "\6\53\12\0\2\53\4\0\3\24\1\344\27\24\6\53"+
    "\12\0\2\53\4\0\32\24\1\345\6\53\12\0\2\53"+
    "\4\0\32\24\1\346\6\53\12\0\2\53\4\0\13\24"+
    "\1\347\17\24\6\53\12\0\2\53\4\0\3\24\1\350"+
    "\27\24\6\53\12\0\2\53\4\0\23\24\1\351\7\24"+
    "\6\53\12\0\2\53\4\0\1\352\32\24\6\53\12\0"+
    "\2\53\4\0\16\24\1\353\14\24\6\53\12\0\2\53"+
    "\4\0\21\24\1\354\11\24\6\53\12\0\2\53\4\0"+
    "\3\24\1\355\27\24\6\53\12\0\2\53\4\0\1\356"+
    "\32\24\6\53\12\0\2\53\4\0\21\24\1\357\11\24"+
    "\6\53\12\0\2\53\4\0\2\24\1\360\30\24\6\53"+
    "\12\0\2\53\4\0\23\24\1\361\7\24\6\53\12\0"+
    "\2\53\4\0\2\24\1\362\30\24\6\53\12\0\2\53"+
    "\4\0\13\24\1\363\17\24\6\53\12\0\2\53\4\0"+
    "\10\24\1\364\22\24\6\53\12\0\2\53\4\0\3\24"+
    "\1\365\27\24\6\53\12\0\2\53\4\0\23\24\1\366"+
    "\7\24\6\53\12\0\2\53\4\0\7\24\1\367\23\24"+
    "\6\53\12\0\2\53\4\0\15\24\1\370\15\24\6\53"+
    "\12\0\2\53\4\0\23\24\1\371\7\24\6\53\12\0"+
    "\2\53\4\0\4\24\1\372\26\24\6\53\12\0\2\53"+
    "\4\0\15\24\1\373\15\24\6\53\12\0\2\53\4\0"+
    "\15\24\1\374\15\24\6\53\12\0\2\53\4\0\23\24"+
    "\1\375\7\24\6\53\12\0\2\53\4\0\4\24\1\376"+
    "\26\24\6\53\12\0\2\53\4\0\32\24\1\377\6\53"+
    "\12\0\2\53\4\0\1\u0100\32\24\6\53\12\0\2\53"+
    "\4\0\2\24\1\u0101\30\24\6\53\12\0\2\53\4\0"+
    "\32\24\1\u0102\6\53\12\0\2\53\4\0\3\24\1\u0103"+
    "\27\24\6\53\12\0\2\53\4\0\4\24\1\u0104\26\24"+
    "\6\53\12\0\2\53\4\0\1\u0105\32\24\6\53\12\0"+
    "\2\53\4\0\1\u0106\32\24\6\53\12\0\2\53\4\0"+
    "\1\u0107\32\24\6\53\12\0\2\53\4\0\23\24\1\u0108"+
    "\7\24\6\53\12\0\2\53\4\0\21\24\1\u0109\11\24"+
    "\6\53\12\0\2\53\4\0\1\u010a\32\24\6\53\12\0"+
    "\2\53\4\0\13\24\1\u010b\17\24\6\53\12\0\2\53"+
    "\4\0\23\24\1\u010c\7\24\6\53\12\0\2\53\4\0"+
    "\4\24\1\u010d\26\24\6\53\12\0\2\53\4\0\13\24"+
    "\1\u010e\17\24\6\53\12\0\2\53\4\0\16\24\1\u010f"+
    "\14\24\6\53\12\0\2\53\4\0\1\u0110\32\24\6\53"+
    "\12\0\2\53\4\0\3\24\1\u0111\27\24\6\53\12\0"+
    "\2\53\4\0\1\u0112\32\24\6\53\12\0\2\53\4\0"+
    "\32\24\1\u0113\6\53\12\0\2\53\4\0\4\24\1\u0114"+
    "\26\24\6\53\12\0\2\53\4\0\4\24\1\u0115\15\24"+
    "\1\u0116\10\24\6\53\12\0\2\53\4\0\1\u0117\32\24"+
    "\6\53\12\0\2\53\4\0\15\24\1\u0118\15\24\6\53"+
    "\12\0\2\53\4\0\17\24\1\u0119\13\24\6\53\12\0"+
    "\2\53\4\0\22\24\1\u011a\10\24\6\53\12\0\2\53"+
    "\4\0\16\24\1\u011b\14\24\6\53\12\0\2\53\4\0"+
    "\23\24\1\u011c\7\24\6\53\12\0\2\53\4\0\1\u011d"+
    "\32\24\6\53\12\0\2\53\4\0\27\24\1\u011e\3\24"+
    "\6\53\12\0\2\53\4\0\30\24\1\u011f\2\24\6\53"+
    "\12\0\2\53\4\0\23\24\1\u0120\7\24\6\53\12\0"+
    "\2\53\4\0\1\u0121\32\24\6\53\12\0\2\53\4\0"+
    "\23\24\1\u0122\7\24\6\53\12\0\2\53\4\0\32\24"+
    "\1\u0123\6\53\12\0\2\53\4\0\16\24\1\u0124\14\24"+
    "\6\53\12\0\2\53\4\0\4\24\1\u0125\26\24\6\53"+
    "\12\0\2\53\4\0\21\24\1\u0126\11\24\6\53\12\0"+
    "\2\53\4\0\21\24\1\u0127\11\24\6\53\12\0\2\53"+
    "\4\0\21\24\1\u0128\11\24\6\53\12\0\2\53\4\0"+
    "\6\24\1\u0129\24\24\6\53\12\0\2\53\4\0\15\24"+
    "\1\u012a\15\24\6\53\12\0\2\53\4\0\23\24\1\u012b"+
    "\7\24\6\53\12\0\2\53\4\0\32\24\1\u012c\6\53"+
    "\12\0\2\53\4\0\4\24\1\u012d\26\24\6\53\12\0"+
    "\2\53\4\0\32\24\1\u012e\6\53\12\0\2\53\4\0"+
    "\24\24\1\u012f\6\24\6\53\12\0\2\53\4\0\21\24"+
    "\1\u0130\11\24\6\53\12\0\2\53\4\0\23\24\1\u0131"+
    "\7\24\6\53\12\0\2\53\4\0\4\24\1\u0132\26\24"+
    "\6\53\12\0\2\53\4\0\4\24\1\u0133\26\24\6\53"+
    "\12\0\2\53\4\0\1\u0134\32\24\6\53\12\0\2\53"+
    "\4\0\1\u0135\32\24\6\53\12\0\2\53\4\0\23\24"+
    "\1\u0136\7\24\6\53\12\0\2\53\4\0\21\24\1\u0137"+
    "\11\24\6\53\12\0\2\53\4\0\32\24\1\u0138\6\53"+
    "\12\0\2\53\4\0\32\24\1\u0139\6\53\12\0\2\53"+
    "\4\0\23\24\1\u013a\7\24\6\53\12\0\2\53\4\0"+
    "\24\24\1\u013b\6\24\6\53\12\0\2\53\4\0\3\24"+
    "\1\u013c\27\24\6\53\12\0\2\53\4\0\1\u013d\32\24"+
    "\6\53\12\0\2\53\4\0\2\24\1\u013e\30\24\6\53"+
    "\12\0\2\53\4\0\3\24\1\u013f\27\24\6\53\12\0"+
    "\2\53\4\0\15\24\1\u0140\15\24\6\53\12\0\2\53"+
    "\4\0\15\24\1\u0141\15\24\6\53\12\0\2\53\4\0"+
    "\10\24\1\u0142\22\24\6\53\12\0\2\53\4\0\1\u0143"+
    "\32\24\6\53\12\0\2\53\4\0\2\24\1\u0144\30\24"+
    "\6\53\12\0\2\53\4\0\21\24\1\u0145\11\24\6\53"+
    "\12\0\2\53\4\0\30\24\1\u0146\2\24\6\53\12\0"+
    "\2\53\4\0\4\24\1\u0147\26\24\6\53\12\0\2\53"+
    "\4\0\16\24\1\u0148\14\24\6\53\12\0\2\53\4\0"+
    "\15\24\1\u0149\15\24\6\53\12\0\2\53\4\0\21\24"+
    "\1\u014a\11\24\6\53\12\0\2\53\4\0\16\24\1\u014b"+
    "\14\24\6\53\12\0\2\53\4\0\16\24\1\u014c\14\24"+
    "\6\53\12\0\2\53\4\0\23\24\1\u014d\7\24\6\53"+
    "\12\0\2\53\4\0\6\24\1\u014e\24\24\6\53\12\0"+
    "\2\53\4\0\32\24\1\u014f\6\53\12\0\2\53\4\0"+
    "\17\24\1\u0150\13\24\6\53\12\0\2\53\4\0\27\24"+
    "\1\u0151\3\24\6\53\12\0\2\53\4\0\15\24\1\u0152"+
    "\15\24\6\53\12\0\2\53\4\0\23\24\1\u0153\7\24"+
    "\6\53\12\0\2\53\4\0\24\24\1\u0154\6\24\6\53"+
    "\12\0\2\53\4\0\21\24\1\u0155\11\24\6\53\12\0"+
    "\2\53\4\0\4\24\1\u0156\26\24\6\53\12\0\2\53"+
    "\4\0\6\24\1\u0157\24\24\6\53\12\0\2\53\4\0"+
    "\16\24\1\u0158\14\24\6\53\12\0\2\53\4\0\4\24"+
    "\1\u0159\26\24\6\53\12\0\2\53\4\0\4\24\1\u015a"+
    "\26\24\6\53\12\0\2\53\4\0\32\24\1\u015b\6\53"+
    "\12\0\2\53\4\0\15\24\1\u015c\15\24\6\53\12\0"+
    "\2\53\4\0\14\24\1\u015d\16\24\6\53\12\0\2\53"+
    "\4\0\21\24\1\u015e\11\24\6\53\12\0\2\53\4\0"+
    "\4\24\1\u015f\26\24\6\53\12\0\2\53\4\0\15\24"+
    "\1\u0160\15\24\6\53\12\0\1\53\1\u0161\4\0\33\24"+
    "\6\53\12\0\2\53\4\0\2\24\1\u0162\30\24\6\53"+
    "\12\0\2\53\4\0\5\24\1\u0163\25\24\6\53\12\0"+
    "\2\53\4\0\23\24\1\u0164\7\24\6\53\12\0\2\53"+
    "\4\0\1\u0165\32\24\6\53\12\0\2\53\4\0\21\24"+
    "\1\u0166\11\24\6\53\12\0\2\53\4\0\13\24\1\u0167"+
    "\17\24\6\53\12\0\2\53\4\0\16\24\1\u0168\14\24"+
    "\6\53\12\0\2\53\4\0\4\24\1\u0169\26\24\6\53"+
    "\12\0\2\53\4\0\13\24\1\u016a\17\24\6\53\12\0"+
    "\2\53\4\0\30\24\1\u016b\2\24\6\53\12\0\2\53"+
    "\4\0\16\24\1\u016c\14\24\6\53\12\0\2\53\4\0"+
    "\21\24\1\u016d\11\24\6\53\12\0\2\53\4\0\23\24"+
    "\1\u016e\7\24\6\53\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15190];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\3\11\25\1\2\0"+
    "\2\11\4\1\1\11\44\1\2\0\50\1\2\0\1\11"+
    "\45\1\2\0\43\1\2\11\247\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public Gta3ScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Gta3ScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 69: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 3:
            { return OP_TIMES;
            }
          // fall through
          case 71: break;
          case 4:
            { return OP_PLUS;
            }
          // fall through
          case 72: break;
          case 5:
            { return OP_MINUS;
            }
          // fall through
          case 73: break;
          case 6:
            { return OP_DIVISION;
            }
          // fall through
          case 74: break;
          case 7:
            { return NUMBER;
            }
          // fall through
          case 75: break;
          case 8:
            { return OP_LESS_THAN;
            }
          // fall through
          case 76: break;
          case 9:
            { return EQUALS;
            }
          // fall through
          case 77: break;
          case 10:
            { return OP_GREATER_THAN;
            }
          // fall through
          case 78: break;
          case 11:
            { return METHOD;
            }
          // fall through
          case 79: break;
          case 12:
            { return IDENTIFIER;
            }
          // fall through
          case 80: break;
          case 13:
            { return OP_PLUS_PLUS;
            }
          // fall through
          case 81: break;
          case 14:
            { return OP_MINUS_MINUS;
            }
          // fall through
          case 82: break;
          case 15:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 83: break;
          case 16:
            { return COMMENT;
            }
          // fall through
          case 84: break;
          case 17:
            { return SUBROUTINE;
            }
          // fall through
          case 85: break;
          case 18:
            { return IF;
            }
          // fall through
          case 86: break;
          case 19:
            { return ON;
            }
          // fall through
          case 87: break;
          case 20:
            { return DEF_PC;
            }
          // fall through
          case 88: break;
          case 21:
            { return AND;
            }
          // fall through
          case 89: break;
          case 22:
            { return END;
            }
          // fall through
          case 90: break;
          case 23:
            { return NOT;
            }
          // fall through
          case 91: break;
          case 24:
            { return OFF;
            }
          // fall through
          case 92: break;
          case 25:
            { return DEF_PSX;
            }
          // fall through
          case 93: break;
          case 26:
            { return SET;
            }
          // fall through
          case 94: break;
          case 27:
            { return ELSE;
            }
          // fall through
          case 95: break;
          case 28:
            { return EXEC;
            }
          // fall through
          case 96: break;
          case 29:
            { return BONUS;
            }
          // fall through
          case 97: break;
          case 30:
            { return END_IF;
            }
          // fall through
          case 98: break;
          case 31:
            { return GOSUB;
            }
          // fall through
          case 99: break;
          case 32:
            { return LIGHT;
            }
          // fall through
          case 100: break;
          case 33:
            { return SOUND;
            }
          // fall through
          case 101: break;
          case 34:
            { return WHILE;
            }
          // fall through
          case 102: break;
          case 35:
            { return PREPROCESS_ENDIF;
            }
          // fall through
          case 103: break;
          case 36:
            { return PREPROCESS_IFDEF;
            }
          // fall through
          case 104: break;
          case 37:
            { return RETURN;
            }
          // fall through
          case 105: break;
          case 38:
            { return COUNTER;
            }
          // fall through
          case 106: break;
          case 39:
            { return CRUSHER;
            }
          // fall through
          case 107: break;
          case 40:
            { return DO_NOWT;
            }
          // fall through
          case 108: break;
          case 41:
            { return END_EXEC;
            }
          // fall through
          case 109: break;
          case 42:
            { return FORWARD;
            }
          // fall through
          case 110: break;
          case 43:
            { return CAR_DATA;
            }
          // fall through
          case 111: break;
          case 44:
            { return CONVEYOR;
            }
          // fall through
          case 112: break;
          case 45:
            { return END_WHILE;
            }
          // fall through
          case 113: break;
          case 46:
            { return LEVEL_END;
            }
          // fall through
          case 114: break;
          case 47:
            { return MAP_ZONE;
            }
          // fall through
          case 115: break;
          case 48:
            { return OBJ_DATA;
            }
          // fall through
          case 116: break;
          case 49:
            { return CHAR_DATA;
            }
          // fall through
          case 117: break;
          case 50:
            { return GENERATOR;
            }
          // fall through
          case 118: break;
          case 51:
            { return ARROW_DATA;
            }
          // fall through
          case 119: break;
          case 52:
            { return CRANE_DATA;
            }
          // fall through
          case 120: break;
          case 53:
            { return DESTRUCTOR;
            }
          // fall through
          case 121: break;
          case 54:
            { return LEVEL_START;
            }
          // fall through
          case 122: break;
          case 55:
            { return MISSION_END;
            }
          // fall through
          case 123: break;
          case 56:
            { return PLAYER_PED;
            }
          // fall through
          case 124: break;
          case 57:
            { return TIMER_DATA;
            }
          // fall through
          case 125: break;
          case 58:
            { return WHILE_EXEC;
            }
          // fall through
          case 126: break;
          case 59:
            { return MACHINE_GUN;
            }
          // fall through
          case 127: break;
          case 60:
            { return MISSION_START;
            }
          // fall through
          case 128: break;
          case 61:
            { return SAVED_COUNTER;
            }
          // fall through
          case 129: break;
          case 62:
            { return CRIMINAL_TYPE2;
            }
          // fall through
          case 130: break;
          case 63:
            { return END_WHILE_EXEC;
            }
          // fall through
          case 131: break;
          case 64:
            { return THREAD_TRIGGER;
            }
          // fall through
          case 132: break;
          case 65:
            { return REACT_AS_NORMAL;
            }
          // fall through
          case 133: break;
          case 66:
            { return AREA_PLAYER_ONLY;
            }
          // fall through
          case 134: break;
          case 67:
            { return ONSCREEN_COUNTER;
            }
          // fall through
          case 135: break;
          case 68:
            { return KILL_CHAR_ON_FOOT;
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
